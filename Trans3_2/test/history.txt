The RPGToolkit Development System, Version 3.1 History

Overview
    
    * This changelog can be found at http://tk3.toolkitzone.com/help/?page=31
    * This document details the changes and new features in RPGToolkit version 3.1.0 from version 3.0.6.
    * Also refer to the updated help files at http://tk3.toolkitzone.com/help/ and the RPGCode function reference http://tk3.toolkitzone.com/help/?page=19

RPGToolkit Editor: toolkit3.exe
IDE changes

    * Tileset browser
          o The tileset browser on the right-hand toolbar can be horizontally resized by dragging at the right edge of the object.
          o Transparent pixels are rendered in "magic pink" (RGB 255, 0, 255).
          o Isometric tiles are drawn more compactly.
    * File tree
          o The project file tree on the right-hand toolbar can be horizontally resized by dragging at the right edge of the object.
          o Improved loading speed.
          o New options added to right-click menu: "Rename" and "Delete" are available for files; "Collapse All" collapses open folders; "Load into board editor" is available for animated tiles (TANs) when the board editor is open.
    * Subfolder selection
          o Files can now be saved into and selected from subfolders of the default folders (default folders are those created by the Toolkit, e.g. "Bitmap" and "Chrs"). Each filetype (e.g., board or character) has a specific default folder.
          o If a file is saved or selected from a folder outside of the default folder for that filetype, you will notified that the file will be copied into the default folder.
          o When specifying files in subfolders in editors, include the name of the subfolder in the link, e.g. "village\village1.brd" for "gameName\Boards\village\village1.brd". Only the backslash '\' is valid for separating folders; '/' is not.

Main file editor

    * "Default pathfinding algorithm" option added to StartUp Info tab. Use this to set the behaviour of mouse-driven movement, ItemPath() and PlayerPath().
    * Vector drawing options added to the Graphics tab. Board and sprite vectors may be drawn in-game for debugging purposes (their colours cannot be changed); the active player's path and destination may be drawn in-game, in the colour specified by the adjacent colour box.
    * Movement style control options added to the Project Settings tab. Mouse- and keyboard-controlled movement can be toggled; diagonal keyboard movement can be deactivated; custom movement keys can be defined for the eight possible directions.

Character editor 

    * New graphics window
          o Section in which to allocate collision and interaction vectors for characters.
          o Vectors are drawn in a similar way as in the board editor. Default shapes can be assigned, or imported from other sprite files.
          o Wizard added to complete movement and idle stances.

Item editor

    * New graphics window (see Character editor).

Animation editor

    * Toolbar
          o Rearranged toolbar: frame delay text box added; frame file text box and browse button added; size option buttons replaced by combo box, includes option to resize to image size.
          o Animation resizes to fit image when an image is selected.
    * Animation Wizard
          o Create animations from selection of image files or tiles.
          o Auto-creation of tile bitmaps for composite tile frames.
          o Auto-detection of transparent colour.

Board editor

    * The board editor has been completely rewritten for this release.
    * Features
          o Define default board parameters at start-up.
          o Vector objects: collision, 'under' (layering), stairs, waypoint types.
          o Image objects: images can be placed directly on to layers.
          o Lighting objects: manipulable spotlights and gradients.
          o Item graphics displayed.
          o Object toolbar.
          o Links to open files in their respective editors.
          o Generic tools: dropper, rectangle, filled rectangle, copy, cut, paste, drag-drop, multi-level undo.
          o All layers displayed, show and hide individual layers.
          o Variable number of layers.
          o Zoom, pan (scroll wheel support).
          o Image export.
          o Tile bitmaps can now be placed as tiles (the constituent tiles are inserted directly into the tile data and no link to the tile bitmap exists).

RPGCode editor

    * RPGCode Updater (Tools)
          o Routine to upgrade RPGCode programs to improve compatibility with 3.1.0's RPGCode.
          o The routine corrects syntax that worked in previous versions but does not work in 3.1.0, either because it is incorrect and the old interpreter does not recognise the error, or because the convention is incompatible with the new RPGCode specification.
          o The updater does not guarantee that updated programs will run perfectly, and some user alterations may be required, depending on the quality of the code.
          o A backup copy of each updated program is saved in the /Prg/Backup folder.
          o All programs should be updated before the game is run, however the updater should never be run again on a program that has been updated.

Known issues

    * Conditional activation variables (e.g. initvar = "0") that are uninitialised are set to "".
    * Top row of solid tiles do not always convert to vectors properly

RPGToolkit Engine: trans3.exe

With the exception of some low-level graphics routines, the engine has been completely rewritten for this release, which is the justification for the new major version number.
Gameplay

    * Coordinate systems
          o Two new coordinate systems are provided: 'isometric rotated' and 'pixel absolute'.
          o
            Isometric rotated
                + The Cartesian coordinate system is rotated onto the isometric plane, resulting in a more intuitive coordinate system. The original isometric system is hereby known as 'isometric stacked'.
                + Caveats of the rotated system: the origin (1,1) is necessarily off-screen, and the coordinate values are dependent upon the board width. That is, changing the board width alters the coordinate values (however, tiles and objects are updated accordingly in the board editor).
          o
            Pixel absolute
                + All objects except tiles are referenced in Cartesian pixel coordinates, regardless of the underlying tile coordinate system (i.e. isometric or 2D).
                + Tiles are still referenced in the underlying coordinate system (i.e., for functions accessing tiles).
                + It is strongly recommended to use the pixel absolute coordinate system on both 2D and isometric boards.
          o
            Converting coordinate systems
                + Boards may be upgraded to either new coordinate system in the board editor. Board data locations are unaffected, but all positions are given in the new system.
                + Updating does not extend to RPGCode programs. All coordinates should be upgraded manually if the coordinate system is changed (this functionality cannot be provided by the RPGCode updater).
    * Movement (see Main File Editor)
          o Movement can now be controlled using the mouse. Scrolling the board by moving the mouse to the edge of the screen is not currently supported.
          o Custom movement keys can be assigned instead of the cursor keys.
          o Dual numberpad-cursor key movement is no longer supported.
    * Pathfinding
          o The engine features a complete pathfinding system based on the new vector system. The system consists of two routines that implement tile and vector pathfinding, respectively.
          o Tile pathfinding encompasses diagonal (8-way) and axial (4-way) movements between fixed grid points. Start and end points may be non-integral but path points will always be fixed. This may limit freedom of movement in comparison to vector pathfinding, especially when using non-tile integral collision vectors.
          o Vector pathfinding allows movement in any direction between any points.
          o Pathfinding is controlled through PlayerPath() and ItemPath(), and used by mouse movement.
    * Miscellaneous
          o 'Target' and 'source' may be given as literal handles in an item's activation program. 'Source' refers to the activated item; 'target' refers to the player. Most sprite functions should now accept literal targets as well as item indices.
          o Walking animation frames now change at the speed of the animation, not at a rate determined by the walking speed. You may need to update your walking animations.

RPGCode

    * New interpreter
      3.1.0 features a novel RPGCode parser and compiler that generates "machine code" (for the RPGCode virtual machine, not the x86) from a raw text program, which is smaller and runs faster than the raw text. The engine also caches compiled programs so that they load more quickly when run again. The interpreter is based on Reverse Polish Notation.
    * Syntax alterations
          o = is not the same as == (the assignment operator is distinct from the equality operator). Use = to assign a value to a variable, use == to compare two values or variables (e.g., in an if statement).

            x = 12;
            if (x == 10)
            {
                show(x); // Will not show because x == 12.
            }
            if (x = 10)
            {
                show(x); // Will show "10" because x = 10 assigns 10 to x and returns x; the if block runs because x ~= 0.
            }

          o All strings must be quoted.

            var = "some string"         // Correct.
            var = some string           // Error.

          o Lines may be terminated with a semi-colon.

            x = 12;         // Valid, good practice.
            x = 12          // Valid, but bad practice.

          o Variable types have been decprecated: variables are now dynamic and can hold literal or numerical values. The literal/numerical identifers $ and ! are no longer required.
          o Variables can be concatenated without type casting.

            mwin("pi is " + 3.14)

          o C++-style comments added: "//" and "/* comment */"

            // Single-line comment.
            /* Multi
            line
            comment */

          o For-loop qualifiers must be semi-colon separated (not comma separated).

            for(i = 0; i ~= 10; ++i) // Valid.
            for(i = 0, i ~= 10, ++i) // Invalid.

          o '=>' is not the 'greater than or equal to' operator (>=)
    * Alterations to existing functions
          o ViewBrd(). Added optional parameter to draw to canvas instead of screen.

            void viewbrd(string filename [, int x, int y [, canvas cnv]])

          o PlayerStep(), ItemStep(). Added optional parameter to receive flags. See help files for information on flag usage and valid flags. Item handle may be 'target' or 'source' or index. Player handle may be index. Superseded by playerPath() and itemPath().

            void playerstep(variant handle, int x, int y [, int flags])

          o Push(), PushItem(). Added optional parameter to receive flags. Item handle may be 'target' or 'source' or index. Player handle may be index. Superseded by playerPath() and itemPath().

            void push(string direction [, variant handle [, int flags]])

          o DirSav(). New parameters to control dialog title, colours, background image. Use 'allowNewFile' to differentiate between loading and saving.

            str dirSav(str title, bool allowNewFile, int textColor, int backColor, str image)

          o ClearButtons(). Optional parameters to clear indexed slots.

            clearbuttons([int slot1, int slot2...])

          o PlayerStance(), ItemStance(). Added optional parameter for flags. See RPGCode reference for valid flags. Stances may be run from threads, optionally pausing thread execution until the stance ends. When run in a program, the stance persists until the frame is changed, e.g. by movement.

            playerstance(handle player, string stance [, int flags])

          o EraseItem(), DestroyItem(), ItemLocation(). Can now receive 'target' or 'source' as item identifiers in item-launched and item-multitasking programs.
          o PathFind(). Can no longer pathfind between layers. Superseded by playerPath(), itemPath().
    * New functions: see RPGCode reference for details
          o ActivePlayer(). Change the player that the user controls to a different member of the party.
          o PlayerLocation().
          o GetTickCount(). Milliseconds since Windows started.
          o CanvasDrawPart().
          o CanvasGetScreen(). Copy the screen to a canvas.
          o PlayerPath(), ItemPath(). Supersede Push(), PushItem(), PlayerStep(), ItemStep(), PathFind(). Enables control of sprite movement by position rather than direction. Pathfinding or explicit paths may be defined. See the Vector Overview tutorial for further information.

            void itemPath(variant handle, int flags, int x1, int y1, ..., int xn, int yn)
            void itemPath(variant handle, int flags | tkMV_PATHFIND, int x1, int y1)
            void itemPath(variant handle, int flags | tkMV_WAYPOINT_PATH, variant boardpath, int cycles)
            void itemPath(variant handle, int flags | tkMV_WAYPOINT_LINK, variant boardpath, int cycles)

          o PlayerGetPath(), ItemGetPath(). Get the number of points or a specific point in a sprite's path.

            int playerGetPath(variant handle)
            void playerGetPath(variant handle, int index, int &x, int &y)

          o BoardGetVector(). Get the number of vectors on the board or the properties of a specific vector.

            int boardGetVector()
            void boardGetVector(variant vector, int &type, int &pointCount, int &layer, bool &isClosed, int &attributes)

          o BoardSetVector().

            void boardSetVector(variant vector, int type, int pointCount, int layer, bool isClosed, int attributes)

          o BoardGetVectorPoint(). Get a single point of a vector by index.

            void boardGetVectorPoint(variant vector, int pointIndex, int &x, int &y)

          o BoardSetVectorPoint(). Set a single point of a vector, optionally applying the changes in order to regenerate pathfinding information.

            void boardSetVectorPoint(variant vector, int pointIndex, int x, int y, bool apply)

          o BoardGetProgram(). As above, for programs.
          o BoardSetProgram().
          o BoardGetProgramPoint().
          o BoardSetProgramPoint().
          o SetAmbientLevel(). Supersedes the AmbientRed, AmbientGreen, AmbientBlue reserved variables.

            void setAmbientLevel(int red, int green, int blue)

          o PlayerDirection(), ItemDirection(). Gets/sets the sprite direction. Possible directions are reserved constants (tkMV_E...), see RPGCode reference.

            int playerDirection(variant handle)
            void playerDirection(variant handle, int dir)

          o SetErrorHandler(). Supersedes 'On Error' syntax.
          o SetResumeNextHandler().
          o ResumeNext().
          o SpriteTranslucency(). Set/get the translucency of sprites moving behind objects.

            void spriteTranslucency(int percent)
            int spriteTranslucency(void)

    * Obselete functions (including previously obsolete functions)
          o Sound() - use Wav() or MediaPlay().
          o Win().
          o GoDos().
          o WalkSpeed() - use PlayerSpeed().
          o ItemWalkSpeed() - use ItemSpeed().
          o CharacterSpeed() - use GameSpeed().
          o BorderColor().
          o UnderArrow().
          o FightStyle().
          o BattleSpeed().
          o TextSpeed().
          o MwinSize().
          o Stance() - use PlayerStance() or ItemStance() instead.
          o StaticText().
          o Parallax().
          o AnimatedTiles().
          o SmartStep().
          o Autocommand().
          o SetConstants().
          o ShopColors().
          o IIf() - use the following "tertiary" operator:

            result = (expression ? true part : false part)
            result = (5 == 3 ? "five equals three" : "five does not equal three")

Graphics

    * Partially translucency for sprites. When passing under a tile or image on a higher layer or on an under-vector, only the coincident portion of the sprite will be drawn translucently (see SpriteTranslucency() function).
    * Support for animated gifs for sprite animations. [link]
    * Ability to place image files (e.g., PNG) on board layers in a similar way to tiles.
    * The ambient level is now applied to non-tile images used for sprites and background/layered images (see AmbientLevel()). This does not apply to tile shading/lighting.

Plugins and callbacks

    * CBGetPlayerNum(PLAYER_DIR_FACING, ...), CBSetPlayerNum(...). The values assigned to each direction have changed to the following values, which correspond to the new RPGCode constants associated with the PlayerDirection() and ItemDirection() functions:
      East 		tkDIR_E 	1
      Southeast 	tkDIR_SE 	2
      South 		tkDIR_S 	3
      Southwest 	tkDIR_SW 	4
      West 		tkDIR_W 	5
      Northwest 	tkDIR_NW 	6
      North 		tkDIR_N 	7
      Northeast 	tkDIR_NW 	8
    * CBGetGeneralString(GEN_PLYROTHERHANDLES, GEN_PLYROTHERFILES), CBSetGeneralString(sim.). No mechanism currently exists to restore removed players, so these variables are not stored.

Fixes

    * Note: Since the engine has been almost entirely rewritten, these bugs have been implicitly fixed during the rewrite process.
    * CreateItem() problems with unoccupied slot numbers.
    * ItemLocation() problems in threads.
    * Board backgrounds disappearing when moving to the top of a board.
    * PlayAvi(), PlayAviSmall() compress dimensions.

Known issues

    * Pathfinding is not infallible. Sprites will get stuck in complex and busy environments. Problems can be avoided by using simple sprite and board collision vectors and waypoint paths.
    * Switching out of a full-screen game (e.g., using Alt-Tab) will cause the game to crash.
    * prompt() does not accept "(".
    * CallPlayerSwap() unimplemented.
    * #global unimplemented.

Licensing

    * The RPGToolkit version 3.1.0 is licensed under the GNU General Public License (GPL) v3. This includes the engine trans3.exe, the editor toolkit3.exe, and the graphics library actkrt3.dll.

Credits

    * Colin Fitzpatrick: RPGCode subsystem (including threaded RPGCode), most file readers, most RPGCode functions, plugin subsystem, most plugin callbacks, battle system subsystem, RPGCode update wizard, various trivial things
    * Jonathan Hughes (Delano): Board editor, animation wizard, project file tree, sprite graphics window, subfolder file selection. Vector collision, vector movement and pathfinding, coordinate systems, partial sprite translucency, layered images.
    * Samuel Bedwell (Occasionally Correct): RPGCode help pages.
    * Lorie-Jay Gutierrez (Khin): Board editor icons.

