<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<div id="primer">

<h2><a href="page17.htm">RPGCode</a> &mdash; <a href="page18.htm">Language Features</a> &mdash; Basics</h2>
<h3 style="margin-bottom: 10px;">Contents</h3>
<ul style="margin-bottom: 15px;">
	<li><a href="#basics">The basics of functions</a></li>
	<li><a href="#variables">Variables</a></li>
	<ul style="margin-bottom: 0px;">
		<li><a href="#variables.num">Numbers</a></li>
		<li><a href="#variables.str">Strings</a></li>
		<li><a href="#variables.array">Arrays and maps</a></li>
	</ul>
	<li><a href="#functionsii">Functions revisited</a></li>
	<ul style="margin-bottom: 0px;">
		<li><a href="#functionsii.arg">Arguments</a></li>
		<li><a href="#functionsii.ret">Return values</a></li>
	</ul>
	<li><a href="#comments">Comments</a></li>
</ul>

<hr />

<a name="basics"></a>
<h3>The Basics of Functions</h3>
<p>
When you run a computer program, your computer will perform different tasks depending on what the program is telling it to do. A program is nothing more than a set of instructions. However, the computer is dependent on you, the programmer, writing those instructions. If you don't tell the program what to do, where to do it, and when to stop, it won't do anything!
</p>

<p>
This manual will teach you the syntax of RPGCode&mdash;the scripting language used to write programs that run in the RPGToolkit's engine&mdash;assuming that you have no prior experience in any programming or scripting languages. We will start learning how to give instructions in our programs by using functions, a key part of RPGCode. So let's dig in right away with this simple script:
</p>

<pre>
mwin("Hello world!");
wait();
</pre>

<p>
If you run this program, you should see the text "Hello world!" appear. Pressing a key on the keyboard will end the program. So what's happening here? Well, the first thing we did was write <code>mwin</code> (which can be interpreted as <em>M</em>essage <em>Win</em>dow), which is a <em>function</em>. Functions are used to perform specific tasks in the program when the function is called, however many times it is needed (for example, the <code>mwin</code> function's task is to show text in the message window). The <code>wait</code> function is used to pause the program until the user presses a key on their keyboard.
</p>

<p>
That's fine and dandy, but what does the other stuff do? When you write a function's name, you will also write a set of parentheses (the <code>(</code> and <code>)</code> characters). In the example above, we passed an <em>argument</em> into the mwin function by writing "Hello world!" between the parentheses. An argument is data that a function uses to work differently or provide different results (for example, the <code>mwin</code> function is given one argument&mdash;the message&mdash;which will be displayed on the screen). There are many different functions in RPGCode and they have different numbers of arguments that they use: Some of them use no arguments at all (as in <code>wait()</code>) and others may use many. In the <em>functions revisited</em> section, I will write more about arguments so you have a clearer understanding of them.
</p>

<p>
The semi-colon (<code>;</code>) at the end of the line is not part of the function itself; it is rather just a character placed at the end of a statement. It is optional, but I will be using it all throughout this manual.
</p>

<hr />



<a name="variables"></a>
<h3>Variables</h3>

<p>
Variables are placeholders for data. The types of data that they can contain are numbers (<em>numeric values</em>) and characters (<em>strings</em> or <em>literal values</em>). What does that mean? Let's say that you have two numbers stored in your memory right now, 4 and 8. Let's also say that we are going to refer to these numbers as number a and number b. If I told you to add the values of number a and number b together, the result will be the number 12 (4 + 8). A <em>variable</em> is like a label that is attached to a value and stored in your computer's memory, so we can consider number a and number b to be variables that store numeric values.
</p>



<a name="variables.num"></a>
<h4>Numbers:</h4>

<p>
The same example I've just given you (addition with numbers) can be reproduced in code by using variables, and this is how:
</p>

<pre>
a = 4;
b = 8;
c = a + b;
</pre>

<p>
First, we create the variable <code>a</code> and assign to it the value 4. We then create another variable, <code>b</code>, which is 8. A final variable, <code>c</code>, is assigned the value returned by <code>a + b</code>, which is 12. The same example can be reproduced with <code>c = a + 8</code>, <code>c = 4 + 8</code>, etc. Either way, <code>c</code> will always end up with the value 12. Other mathematical operations such as division and multiplication are also possible:
</p>

<pre>
a = 4;
b = 8;

c = b - a;
d = a * b;
e = a / b;
</pre>

<p>
We have created the same two variables, <code>a</code> and <code>b</code>, but this time we are subtracting, multiplying, and dividing instead of adding. In this example, the variable <code>c</code> has the value 4 (4 subtracted from 8), <code>d</code> has the value 32 (4 multiplied by 8), and <code>e</code> has the value 0.5 (4 divided by 8).
</p>

<p>
It is also possible to use scientific notation when dealing with numbers (as in <code>1e+6</code> or <code>1e-2</code>).
</p>



<a name="variables.str"></a>
<h4>Strings:</h4>

<p>
A <em>string</em> is one or more characters that are enclosed in quotes. When assigning a string to a variable or using a string as an argument (as with the "Hello world!" string we used earlier in the mwin example), quotation marks <em>must</em> be used. Assigning a string to a variable is done the same way as assigning a numeric value:
</p>

<pre>
someString = "Hello!";
</pre>

<p>
The above code will produce the variable <code>someString</code> with the value "<em>Hello!</em>". Addition can also be applied to strings, as is illustrated next:
</p>

<pre>
x = "Hello";
y = x + " world!";
</pre>

<p>
First, we assign "Hello" to <code>x</code>. Then we assign <code>x + " world!"</code> to <code>y</code>. The variable <code>y</code> is now equal to "Hello world!". That's all there is to it!
</p>

<p>
Variables in RPGCode are not restricted to a certain data type ("duck typing"). At any time, you can assign a string value to a variable that already has a numeric value or vice versa. You can even mix the data types together (for instance, <code>x = "Hello " + 32</code> will produce the string value "Hello 32"). Variable names may contain letters, numbers, and underscores and are case-insensitive.
</p>



<a name="variables.array"></a>
<h4>Arrays and maps:</h4>

<p>
Arrays are groups of data that are referred to by the same <em>identifier</em>, whose values are accessed by using a pair of square brackets and an <em>index</em>. Of course, that's just one way to put it: let's look at an example so we can get a clearer picture of the actual syntax!
</p>

<pre>
x[0] = 1;
x[1] = 2;
show(x[0]);
show(x[1]);
wait();
</pre>

<p>
In this example, we create an array with two elements (<code>x[0]</code> and <code>x[1]</code>), assign them the values 1 and 2, then show them in the message window. Different elements of the array are accessed with the array subscript operator <code>[]</code>, where the value between the brackets is its operand (the element of the array to access). If that sounds confusing at all, then let's look at it this way: Think of a variable identifier (such as <code>x</code> or <code>y</code>) as a box; usually, this box can only hold one thing, like the number 5. If we use an array, we can refer to more than one thing with the box using an ID or <em>index</em>. Simple, right?
</p>

<p>
Arrays in RPGCode may also have more than one index at a time, specified by more array subscript operators following the first. These are all valid:
</p>

<pre>
things[0] = 99;
things[1][0] = "Hello!";
things[1][0][0] = 32;
</pre>

<p>
<em>Maps</em> are also allowed in RPGCode. They are basically arrays with string indexes instead of numerical indexes. They look a little something like this:
</p>

<pre>
person["name"] = "OC";
person["level"] = -1;
person["occupation"] = "Fun!";
</pre>

<p>
Also take note that the index of an array or map can actually be any valid RPGCode expression. For example, if you have an array with the index 5, it is valid to access it like this:
</p>

<pre>
someArray[5] = 10;
show(someArray[3 + 2]);
</pre>

<p>
Variables, functions, other arrays &mdash; anything that returns a value can be used here.
</p>

<hr />



<a name="functionsii"></a>
<h3>Functions revisited</h3>

<a name="functionsii.arg"></a>
<h4>Arguments:</h4>

<p>
Now that we've taken a look at what variables are, let's back-track to functions for a bit. From the first portion of this page, you learned that a function argument is a piece of data &mdash; a number or string value, like what we discussed with variables &mdash; that is written between the function's parentheses. Anything that results in a number or a string can be used as an argument. Look at this piece of code:
</p>

<pre>
a = 4;
b = 8;

mwin(a);
mwin(a + b);
mwin("Testing addition: " + b);
wait();
</pre>

<p>
Here, we've assigned the values 4 and 8 to the variables a and b (like we did earlier), but this time we've displayed them on the screen with the <code>mwin</code> function. The first time, we display the variable <code>a</code>, which is 4. Then we displayed 12 (<code>a + b</code>; the number returned by the equation was used as the argument). Lastly, we displayed the string "Testing addition: 8" (because <code>b</code> was tacked onto the end).
</p>



<a name="functionsii.ret"></a>
<h4>Return values:</h4>

<p>
Some functions in RPGCode return certain values. A common example of this is the <code>wait</code> function, which can return the key that the user pressed. Any value that a function returns is just like what was discussed in the section about arguments &mdash; it can be assigned to a variable, operated on, or used directly as an argument (you could even think of expressions like <code>2 + 2</code> as having "return values" because they produce a resulting value). The following two examples will show whatever key the user pressed on the keyboard using two different approaches:
</p>

<pre>
key = wait();
mwin(key);

wait();
mwinCls();
</pre>

<pre>
mwin(wait());

wait();
mwinCls();
</pre>

<p>
The first line of code in the first example, <code>key = wait()</code> pauses the program until the user presses a key on their keyboard, which is then returned by the function and stored in the variable <code>key</code>. It is then output to the screen. The second example eliminates the need for a variable by passing <code>wait</code>'s returned value directly into the <code>mwin</code> function. (<code>mwincls()</code>, by the way, just clears the message window from the screen.)
</p>

<hr />



<a name="comments"></a>
<h3>Comments</h3>

<p>
You are able to write comments in your programs that are ignored when the program is run. These are useful for offering insight into a particular piece of code, showing an example of how something might be used, and other things. Comments are marked by two forward slashes (<code>//</code>) and can appear almost anywhere in your code. For example:
</p>

<pre>
// This is a comment &mdash; it's ignored at run-time!
// The following line of code won't be run because it's commented:
//mwin("Hello, world!");
</pre>

<p>
As of 3.1.0, C-style comments are also allowed. Any text between <code>/*</code> and <code>*/</code> will be considered comments:
</p>

<pre>
/* A single-line C-style comment. It also allows multiline comments! */
</pre>


</div>

<hr />
<p>
<a href="page18.htm">previous</a>, <a href="page18.2.htm">forward</a>
</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
