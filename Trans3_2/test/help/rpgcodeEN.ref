// RPGCode Quick Reference List
// Version 3.1.0
// Automatically generated by functionparse.php?quickref
:COUNT
262

:COMMAND
This list was last generated 28/09/07 for 3.1.0.
:DESCR
This list was last generated 28/09/07 for 3.1.0.

:COMMAND
activePlayer(handle)
:DESCR
void activePlayer(variant handle)
Set or get the active player, by handle

:COMMAND
activePlayer(void)
:DESCR
handle activePlayer(void)
Set or get the active player, by handle

:COMMAND
addPlayer(file)
:DESCR
void addPlayer(string file)
Add a player to the party

:COMMAND
ai(level)
:DESCR
void ai(int level)
Have the source enemy use the internal AI

:COMMAND
animatedTiles()
:DESCR
void animatedTiles()
Toggle animated tiles

:COMMAND
applyStatus(target, file)
:DESCR
void applyStatus(string target, string file)
Apply a status effect to a fighter

:COMMAND
appPath([&dest])
:DESCR
string appPath([string &dest])
Retrieve the path of trans3

:COMMAND
asc(chr[, &ret])
:DESCR
int asc(string chr[, int &ret])
Get the ASCII value of a character

:COMMAND
attackAll(fp)
:DESCR
void attackAll(int fp)
Deal the specified amount in HP to all the members of the target's party

:COMMAND
autoCommand()
:DESCR
void autoCommand()
Obsolete

:COMMAND
autoLocal(bEnabled)
:DESCR
void autoLocal(bool bEnabled)
Set the default scope for variable resolution

:COMMAND
battleSpeed(speed)
:DESCR
void battleSpeed(int speed)
Obsolete

:COMMAND
bitmap(file, [cnv])
:DESCR
void bitmap(string file, [canvas cnv])
Fill a surface with an image

:COMMAND
boardGetProgram(programIndex, &program, &pointCount, &layer, &isClosed, &attributes, &distanceRepeat)
:DESCR
void boardGetProgram(int programIndex, string &program, int &pointCount, int &layer, bool &isClosed, int &attributes, int &distanceRepeat)
Returns the properties of a given program

:COMMAND
boardGetProgram()
:DESCR
int boardGetProgram()
Returns the properties of a given program

:COMMAND
boardGetProgramPoint(programIndex, pointIndex, &x, &y)
:DESCR
void boardGetProgramPoint(int programIndex, int pointIndex, int &x, int &y)
Get a single point on a board program

:COMMAND
boardGetVector()
:DESCR
int boardGetVector()
Returns the number of vectors on the board

:COMMAND
boardGetVector(vector, &type, &pointCount, &layer, &isClosed, &attributes)
:DESCR
void boardGetVector(variant vector, int &type, int &pointCount, int &layer, bool &isClosed, int &attributes)
Returns the number of vectors on the board

:COMMAND
boardGetVectorPoint(vector, pointIndex, &x, &y)
:DESCR
void boardGetVectorPoint(variant vector, int pointIndex, int &x, int &y)
Get a single point on a board vector

:COMMAND
boardSetProgram(programIndex, program, pointCount, layer, isClosed, attributes, distanceRepeat)
:DESCR
void boardSetProgram(int programIndex, string program, int pointCount, int layer, bool isClosed, int attributes, int distanceRepeat)
Sets the properties of a given program; creates a new program if one-past-the-end index is given

:COMMAND
boardSetProgramPoint(programIndex, pointIndex, x, y)
:DESCR
void boardSetProgramPoint(int programIndex, int pointIndex, int x, int y)
Set/move a single point on a board program

:COMMAND
boardSetVector(vector, type, pointCount, layer, isClosed, attributes)
:DESCR
void boardSetVector(variant vector, int type, int pointCount, int layer, bool isClosed, int attributes)
Sets the properties of a given vector

:COMMAND
boardSetVectorPoint(vector, pointIndex, x, y, apply)
:DESCR
void boardSetVectorPoint(variant vector, int pointIndex, int x, int y, bool apply)
Set/move a single point on a board vector

:COMMAND
bold(enable)
:DESCR
void bold(bool enable)
Toggle emboldening of text

:COMMAND
borderColor(r, g, b)
:DESCR
void borderColor(int r, int g, int b)
Obsolete

:COMMAND
branch(lbl)
:DESCR
void branch(label lbl)
Jump to a label

:COMMAND
callplayerswap(...)
:DESCR
callplayerswap(...)
Unimplemented in 3

:COMMAND
callshop(item1, item2, item3, ...)
:DESCR
void callshop(string item1, string item2, string item3, ...)
Displays a basic shop interface that allows the buying of the items given as parameters and the selling of items in the player's inventory

:COMMAND
canvasDrawPart(cnv, x, y, xSrc, ySrc, width, height[, cnvDest])
:DESCR
void canvasDrawPart(int cnv, int x, int y, int xSrc, int ySrc, int width, int height[, canvas cnvDest])
Draw part of a canvas

:COMMAND
canvasGetScreen(cnvDest)
:DESCR
void canvasGetScreen(canvas cnvDest)
Copy the screen onto a canvas

:COMMAND
castInt(x, [&ret])
:DESCR
int castInt(variant x, [int &ret])
Cast the specified value to an integer (i

:COMMAND
castLit(x, [&ret])
:DESCR
string castLit(variant x, [string &ret])
Cast the specified value to a string

:COMMAND
castNum(x, [&ret])
:DESCR
double castNum(variant x, [double &ret])
Cast the specified value to a number (double)

:COMMAND
change(program)
:DESCR
void change(string program)
Change this program so that next time it is triggered, a different program runs instead

:COMMAND
characterSpeed()
:DESCR
void characterSpeed()
Obsolete

:COMMAND
charAt(str, pos, [&ret])
:DESCR
string charAt(string str, int pos, [string &ret])
Get a character from a string

:COMMAND
chr(asc, [&ret])
:DESCR
string chr(int asc, [string &ret])
Get the character represented by the ASCII code passed in

:COMMAND
clear([cnv])
:DESCR
void clear([canvas cnv])
Clear a surface

:COMMAND
clearBuffer()
:DESCR
void clearBuffer()
Clear the keyboard buffer

:COMMAND
clearbuttons([slot1, slot2...])
:DESCR
clearbuttons([int slot1, int slot2...])
Clear buttons set by SetButton()

:COMMAND
closeFile(file)
:DESCR
void closeFile(string file)
Close a file

:COMMAND
color(dos)
:DESCR
void color(int dos)
Change to a DOS colour

:COMMAND
colorRgb(r, g, b)
:DESCR
void colorRgb(int r, int g, int b)
Change the active colour to an RGB value

:COMMAND
cos(x, [&ret])
:DESCR
double cos(double x, [double &ret])
Calculate cosine x

:COMMAND
createCanvas(width, height, [&cnv])
:DESCR
canvas createCanvas(int width, int height, [canvas &cnv])
Create a canvas

:COMMAND
createCursorMap([&ret])
:DESCR
cursor_map createCursorMap([cursor_map &ret])
Create a cursor map

:COMMAND
createItem(filename[, &pos])
:DESCR
int createItem(string filename[, int &pos])
Load an item and return the slot into which it was loaded

:COMMAND
cursorMapAdd(x, y, map)
:DESCR
void cursorMapAdd(int x, int y, cursor_map map)
Add a point to a cursor map

:COMMAND
cursorMapHand(cursor[, stretch = true])
:DESCR
void cursorMapHand(string cursor[, bool stretch = true])
Change the cursor used everywhere cursors are used (e

:COMMAND
cursorMapRun(map, [&ret])
:DESCR
int cursorMapRun(cursor_map map, [int &ret])
Run a cursor map

:COMMAND
debug(enable)
:DESCR
void debug(bool enable)
Toggle whether to show debug messages

:COMMAND
debugger(message)
:DESCR
void debugger(string message)
Show a debug message

:COMMAND
delay(time)
:DESCR
void delay(double time)
Delay for a certain number of seconds

:COMMAND
destroyitem(handle)
:DESCR
void destroyitem(variant handle)
Remove an item from memory

:COMMAND
destroyPlayer(handle)
:DESCR
void destroyPlayer(string handle)
Permanently remove a player from the party

:COMMAND
dirSav(title, allowNewFile, textColor, backColor, image)
:DESCR
string dirSav(string title, bool allowNewFile, int textColor, int backColor, string image)
Allow the user to choose a *

:COMMAND
done()
:DESCR
void done()
End the program

:COMMAND
drainAll(fp)
:DESCR
void drainAll(int fp)
Deal the specified amount in SMP to all the members of the target's party

:COMMAND
drawCanvas(cnv, x, y, [width, height, [dest]])
:DESCR
void drawCanvas(canvas cnv, int x, int y, [int width, int height, [canvas dest]])
Blit a canvas forward

:COMMAND
drawCanvasTransparent(cnv, x, y, r, g, b[, width, height[, dest]])
:DESCR
void drawCanvasTransparent(canvas cnv, int x, int y, int r, int g, int b[, int width, int height[, canvas dest]])
Blit a canvas forward, but don't blit one colour (the transparent colour)

:COMMAND
DrawCircle(x, y, radius [, canvas])
:DESCR
void DrawCircle(int x, int y, int radius [, int canvas])
Draw a circle at x,y, optionally to a canvas

:COMMAND
drawEnemy(file, x, y, [cnv])
:DESCR
void drawEnemy(string file, int x, int y, [canvas cnv])
Draw an enemy

:COMMAND
drawLine(x1, y1, x2, y2, [cnv])
:DESCR
void drawLine(int x1, int y1, int x2, int y2, [canvas cnv])
Draw a line

:COMMAND
drawRect(x1, y1, x2, y2, [cnv])
:DESCR
void drawRect(int x1, int y1, int x2, int y2, [canvas cnv])
Draw a rectangle

:COMMAND
earthquake(intensity)
:DESCR
earthquake(int intensity)
Shake the screen

:COMMAND
empty()
:DESCR
void empty()
Clear all globals

:COMMAND
end()
:DESCR
void end()
End the program

:COMMAND
endAnimation(animationID)
:DESCR
endAnimation(int animationID)
End a multitasking animation

:COMMAND
equip(handle, location, item)
:DESCR
void equip(variant handle, int location, string item)
Equip an item from the inventory (by handle or filename) to a location on the player's body

:COMMAND
eraseitem(handle)
:DESCR
void eraseitem(variant handle)
Erase an item from the screen, but keep it in memory

:COMMAND
eraseplayer(handle)
:DESCR
void eraseplayer(string handle)
Erase a party player from the screen

:COMMAND
fade(type)
:DESCR
void fade(int type)
Perform a fade using the current colour

:COMMAND
fight(skill, background)
:DESCR
void fight(int skill, string background)
Start a skill level fight

:COMMAND
fightEnemy(enemy, enemy, ... background)
:DESCR
void fightEnemy(string enemy, string enemy, ... string background)
Start a fight

:COMMAND
fightMenuGraphic(image)
:DESCR
void fightMenuGraphic(string image)
Choose an image for the fight menu graphic

:COMMAND
fightStyle()
:DESCR
void fightStyle()
Obsolete

:COMMAND
fileEof(file, [&ret])
:DESCR
bool fileEof(string file, [bool &ret])
Check whether the end of a file has been reached

:COMMAND
fileGet(file, [&ret])
:DESCR
string fileGet(string file, [string &ret])
Get a byte from a file

:COMMAND
fileInput(file, [&ret])
:DESCR
string fileInput(string file, [string &ret])
Read a line from a line

:COMMAND
filePrint(file, line)
:DESCR
void filePrint(string file, string line)
Write a line to a file

:COMMAND
filePut(file, byte)
:DESCR
void filePut(string file, string byte)
Write a byte to a file

:COMMAND
FillCircle(x, y, radius [, canvas])
:DESCR
void FillCircle(int x, int y, int radius [, int canvas])
Draw a filled circle at x, y, to screen or canvas

:COMMAND
fillRect(x1, y1, x2, y2, [cnv])
:DESCR
void fillRect(int x1, int y1, int x2, int y2, [canvas cnv])
Draw a filled rectangle

:COMMAND
font(font)
:DESCR
void font(string font)
Load a true type font

:COMMAND
fontSize(size)
:DESCR
void fontSize(int size)
Set the font size

:COMMAND
forceRedraw()
:DESCR
void forceRedraw()
Force a redrawing of the screen

:COMMAND
gamespeed(speed)
:DESCR
void gamespeed(int speed)
Set the overall walking speed

:COMMAND
get([&ret])
:DESCR
string get([string &ret])
Get a key from the queue

:COMMAND
GetBoardName([ret])
:DESCR
string GetBoardName([string ret])
Get the current board's file name

:COMMAND
getBoardTile(x, y, z, [&ret])
:DESCR
string getBoardTile(int x, int y, int z, [string &ret])
Get the file name of the tile at x, y, z

:COMMAND
getBoardTileType(x, y, z[, &ret])
:DESCR
string getBoardTileType(int x, int y, int z[, string &ret])
Get the type of a tile

:COMMAND
getColor(&r, &g, &b)
:DESCR
void getColor(int &r, int &g, int &b)
Get the current colour

:COMMAND
getCorner(&topX, &topY)
:DESCR
void getCorner(int &topX, int &topY)
Get the corner of the currently shown portion of the board

:COMMAND
getDp(handle, [&ret])
:DESCR
int getDp(string handle, [int &ret])
Get a fighter's dp

:COMMAND
getFontSize([&ret])
:DESCR
int getFontSize([int &ret])
Get the current font size

:COMMAND
getFp(handle, [&ret])
:DESCR
int getFp(string handle, [int &ret])
Get a fighter's fp

:COMMAND
getGp([&ret])
:DESCR
int getGp([int &ret])
Return the amount of gold pieces held

:COMMAND
getHp(handle, [&ret])
:DESCR
int getHp(string handle, [int &ret])
Get a fighter's hp

:COMMAND
getItemCost(fileName[, &ret])
:DESCR
int getItemCost(string fileName[, int &ret])
Get an item's cost

:COMMAND
getItemDesc(fileName[, &ret])
:DESCR
string getItemDesc(string fileName[, string &ret])
Get an item's description

:COMMAND
getItemName(fileName[, &ret])
:DESCR
string getItemName(string fileName[, string &ret])
Get an item's handle

:COMMAND
getItemSellPrice(fileName[, &ret])
:DESCR
int getItemSellPrice(string fileName[, int &ret])
Get the price for which an item sells

:COMMAND
getLevel(handle[, &ret])
:DESCR
int getLevel(string handle[, int &ret])
Get the level of a player

:COMMAND
getMaxHp(handle, [&ret])
:DESCR
int getMaxHp(string handle, [int &ret])
Get a fighter's max hp

:COMMAND
getMaxSmp(handle, [&ret])
:DESCR
int getMaxSmp(string handle, [int &ret])
Get a fighter's max smp

:COMMAND
getPixel(x, y, &r, &g, &b, [cnv])
:DESCR
void getPixel(int x, int y, int &r, int &g, int &b, [canvas cnv])
Get the colour of the pixel at (x, y)

:COMMAND
getRes(&x, &y)
:DESCR
void getRes(int &x, int &y)
Get the screen's resolution

:COMMAND
getSmp(handle, [&ret])
:DESCR
int getSmp(string handle, [int &ret])
Get a fighter's smp

:COMMAND
gettextheight(text)
:DESCR
int gettextheight(string text)
Get the height of a string of text in pixels, relative to the current font and size

:COMMAND
gettextwidth(text)
:DESCR
int gettextwidth(string text)
Get the width of a string of text in pixels, relative to the current font and size

:COMMAND
getThreadId([&ret])
:DESCR
thread getThreadId([thread &ret])
Get the ID of this thread

:COMMAND
getTickCount()
:DESCR
int getTickCount()
Get the number of milliseconds since Windows started

:COMMAND
giveExp(handle, amount)
:DESCR
void giveExp(string handle, int amount)
Give experience to a player

:COMMAND
giveGp(gp)
:DESCR
void giveGp(int gp)
Give gold pieces

:COMMAND
giveHp(handle, add)
:DESCR
void giveHp(string handle, int add)
Increase a fighter's current hp

:COMMAND
giveItem(itm)
:DESCR
void giveItem(string itm)
Add an item to the inventory

:COMMAND
giveSmp(handle, value)
:DESCR
void giveSmp(string handle, int value)
Increase a fighter's smp

:COMMAND
goDos(command)
:DESCR
void goDos(string command)
Obsolete

:COMMAND
gone()
:DESCR
void gone()
Remove the currently running program from the board until the board has been left

:COMMAND
hp(handle, value)
:DESCR
void hp(string handle, int value)
Set a fighter's hp

:COMMAND
iif(condition, true, false)
:DESCR
iif(condition, true, false)
Obsolete

:COMMAND
inn()
:DESCR
inn()
Fully heal the player party

:COMMAND
inStr(haystack, needle[, offset])
:DESCR
int inStr(string haystack, string needle[, int offset])
Returns the first occurence of needle within haystack, optionally starting from an offset

:COMMAND
internalMenu(menu)
:DESCR
void internalMenu(int menu)
Show a menu using the menu plugin

:COMMAND
italics(enable)
:DESCR
void italics(bool enable)
Toggle italicizing of text

:COMMAND
itemCount(fileName[, &ret])
:DESCR
int itemCount(string fileName[, int &ret])
Count the number of a certain item in the inventory

:COMMAND
itemDirection(handle)
:DESCR
int itemDirection(variant handle)
Returns the item direction

:COMMAND
itemDirection(handle, dir)
:DESCR
void itemDirection(variant handle, int dir)
Returns the item direction

:COMMAND
itemGetPath(handle)
:DESCR
int itemGetPath(variant handle)
Get the number of points in the sprite's path

:COMMAND
itemGetPath(handle, index, &x, &y)
:DESCR
void itemGetPath(variant handle, int index, int &x, int &y)
Get the number of points in the sprite's path

:COMMAND
itemlocation(handle, &x, &y, &layer)
:DESCR
void itemlocation(variant handle, int &x, int &y, int &layer)
Get the location of an item

:COMMAND
itemPath(handle, flags, x1, y1, ... , xn, yn)
:DESCR
void itemPath(variant handle, int flags, int x1, int y1, ... , int xn, int yn)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
itemPath(handle, flags | tkMV_PATHFIND, x1, y1)
:DESCR
void itemPath(variant handle, int flags | tkMV_PATHFIND, int x1, int y1)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
itemPath(handle, flags | tkMV_WAYPOINT_PATH, boardpath, cycles)
:DESCR
void itemPath(variant handle, int flags | tkMV_WAYPOINT_PATH, variant boardpath, int cycles)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
itemPath(handle, flags | tkMV_WAYPOINT_LINK, boardpath, cycles)
:DESCR
void itemPath(variant handle, int flags | tkMV_WAYPOINT_LINK, variant boardpath, int cycles)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
itemspeed(handle, speed)
:DESCR
void itemspeed(variant handle, int speed)
Set the delay in seconds between an item's steps

:COMMAND
itemstance(item, stance [, flags])
:DESCR
itemstance(handle item, string stance [, int flags])
Animate an item's custom stance

:COMMAND
itemstep(handle, x, y [, flags])
:DESCR
void itemstep(variant handle, int x, int y [, int flags])
Causes the item to take one step in the direction of x, y following a route determined by pathFind

:COMMAND
itemWalkSpeed()
:DESCR
void itemWalkSpeed()
Obsolete

:COMMAND
kill(&var, ...)
:DESCR
void kill(variant &var, ...)
Delete variables

:COMMAND
killCanvas(cnv)
:DESCR
void killCanvas(canvas cnv)
Kill a canvas

:COMMAND
killCursorMap(map)
:DESCR
void killCursorMap(cursor_map map)
Kill a cursor map

:COMMAND
killThread(id)
:DESCR
void killThread(thread id)
Kill a thread

:COMMAND
layerput(x, y, layer, tile)
:DESCR
void layerput(int x, int y, int layer, string tile)
Place a tile on the board for the duration the player is on the board

:COMMAND
lcase(str, [&ret])
:DESCR
string lcase(string str, [string &ret])
Convert a string to lowercase

:COMMAND
left(str, amount[, &ret])
:DESCR
string left(string str, int amount[, string &ret])
Get characters from the left of a string

:COMMAND
len(str[, &ret])
:DESCR
int len(string str[, int &ret])
Get the length of a string

:COMMAND
load(file)
:DESCR
void load(string file)
Load the game state from a file

:COMMAND
log(x, [&ret])
:DESCR
double log(double x, [double &ret])
Returns n such that en = x

:COMMAND
mainFile(gam)
:DESCR
void mainFile(string gam)
Load a new main file

:COMMAND
maxHp(handle, value)
:DESCR
void maxHp(string handle, int value)
Set a fighter's max hp

:COMMAND
maxSmp(handle, value)
:DESCR
void maxSmp(string handle, int value)
Set a fighter's max smp

:COMMAND
mediaPlay(file)
:DESCR
void mediaPlay(string file)
Play the specified file as the background music

:COMMAND
mediaStop()
:DESCR
void mediaStop()
Stop the background music

:COMMAND
mem(x, y, pos)
:DESCR
void mem(int x, int y, int pos)
Lay a scanned tile on the screen at the specified position

:COMMAND
menuGraphic(image)
:DESCR
void menuGraphic(string image)
Choose an image for the menu

:COMMAND
mid(str, start, length[, &dest])
:DESCR
string mid(string str, int start, int length[, string &dest])
Obtain a substring

:COMMAND
mouseclick(&x, &y [, noWait])
:DESCR
mouseclick(int &x, int &y [, bool noWait])
Wait for a mouseclick or immediately retrieve the last and return the x, y location (pixel values relative to the window)

:COMMAND
mouseCursor(file, x, y, red, green. blue)
:DESCR
void mouseCursor(string file, int x, int y, int red, int green. int blue)
Change the mouse cursor

:COMMAND
mousemove(&x, &y)
:DESCR
mousemove(int &x, int &y)
Wait for the mouse to move and return the x,y location in pixels from the window corner

:COMMAND
move(x, y, [z = 1])
:DESCR
void move(int x, int y, [int z = 1])
Move this board program to a new location on the board

:COMMAND
mp3pause()
:DESCR
void mp3pause()
Play a sound effect and pause the engine until it finishes

:COMMAND
msgBox(text [,title [, style [, textColor [, backColor [, bitmap]]]]])
:DESCR
int msgBox(string text [,string title [, int style [, int textColor [, int backColor [, string bitmap]]]]])
Display a message box containing one or two buttons, handled using a cursor map (keyboard input only)

:COMMAND
multirun()
:DESCR
multirun()
Multirun()'s behaviour depends on the program's context

:COMMAND
mwin(str)
:DESCR
void mwin(string str)
Show the message window

:COMMAND
mwinCls()
:DESCR
void mwinCls()
Clear and hide the message window

:COMMAND
mwinsize(percent)
:DESCR
mwinsize(int percent)
Obsolete

:COMMAND
newPlayer(file)
:DESCR
void newPlayer(string file)
Change the graphics of the main player to that of the file passed in

:COMMAND
onBoard(handle)
:DESCR
int onBoard(variant handle)
Return whether a player is being shown on the board

:COMMAND
openFileAppend(file, folder)
:DESCR
void openFileAppend(string file, string folder)
Open a file for appending

:COMMAND
openFileBinary(file, folder)
:DESCR
void openFileBinary(string file, string folder)
Obsolete

:COMMAND
openFileInput(file, folder)
:DESCR
void openFileInput(string file, string folder)
Open a file in input mode

:COMMAND
openFileOutput(file, folder)
:DESCR
void openFileOutput(string file, string folder)
Open a file in output mode

:COMMAND
over()
:DESCR
void over()
Displays a game over message and resets the game

:COMMAND
parallax(setting)
:DESCR
parallax(int setting)
obsolete

:COMMAND
pixelMovement([pixelMovement [, pixelPush]])
:DESCR
bool pixelMovement([bool pixelMovement [, bool pixelPush]])
Toggles pixel movement and push() et al

:COMMAND
pixelText(x, y, str, [cnv])
:DESCR
void pixelText(int x, int y, string str, [canvas cnv])
Displays text on the screen using pixel coordinates

:COMMAND
playAvi(movie)
:DESCR
void playAvi(string movie)
Play a movie full screen

:COMMAND
playAviSmall(movie)
:DESCR
playAviSmall(string movie)
Play a movie at actual size, centred

:COMMAND
playerDirection(handle)
:DESCR
int playerDirection(variant handle)
Returns the player direction

:COMMAND
playerDirection(handle, dir)
:DESCR
void playerDirection(variant handle, int dir)
Returns the player direction

:COMMAND
playerGetPath(handle)
:DESCR
int playerGetPath(variant handle)
Get the number of points in the sprite's path

:COMMAND
playerGetPath(handle, index, &x, &y)
:DESCR
void playerGetPath(variant handle, int index, int &x, int &y)
Get the number of points in the sprite's path

:COMMAND
playerlocation(handle, &x, &y, &layer)
:DESCR
void playerlocation(variant handle, int &x, int &y, int &layer)
Get the location of a player

:COMMAND
playerPath(handle, flags, x1, y1, ... , xn, yn)
:DESCR
void playerPath(variant handle, int flags, int x1, int y1, ... , int xn, int yn)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
playerPath(handle, flags | tkMV_PATHFIND, x1, y1)
:DESCR
void playerPath(variant handle, int flags | tkMV_PATHFIND, int x1, int y1)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
playerPath(handle, flags | tkMV_WAYPOINT_PATH, boardpath, cycles)
:DESCR
void playerPath(variant handle, int flags | tkMV_WAYPOINT_PATH, variant boardpath, int cycles)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
playerPath(handle, flags | tkMV_WAYPOINT_LINK, boardpath, cycles)
:DESCR
void playerPath(variant handle, int flags | tkMV_WAYPOINT_LINK, variant boardpath, int cycles)
Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter

:COMMAND
playerspeed(handle, speed)
:DESCR
void playerspeed(string handle, int speed)
Set the delay in seconds between a player's steps

:COMMAND
playerstance(player, stance [, flags])
:DESCR
playerstance(handle player, string stance [, int flags])
Animate a player's custom stance

:COMMAND
playerstep(handle, x, y [, flags])
:DESCR
void playerstep(variant handle, int x, int y [, int flags])
Causes the player to take one step in the direction of x, y following a route determined by pathFind

:COMMAND
posture(id [, player])
:DESCR
posture(int id [, handle player])
Show a custom player animation named "Custom" + str(id) (e

:COMMAND
prg(program. x, y, [z = 1])
:DESCR
void prg(string program. int x, int y, [int z = 1])
Move a program on the current board to a new location

:COMMAND
print(text)
:DESCR
void print(string text)
Write the specified string one line down from the last call to text()

:COMMAND
prompt(question, [&ret])
:DESCR
string prompt(string question, [string &ret])
Ask the player a question and return the result

:COMMAND
push(direction [, [, flags]])
:DESCR
void push(string direction [, variant handle [, int flags]])
Push the player with the specified handle, or the default player if no handle is specified, along the given directions

:COMMAND
pushItem(item, direction [, flags])
:DESCR
void pushItem(variant item, string direction [, int flags])
The first parameter accepts either a string that can be either "target" or "source" direction or the number of an item

:COMMAND
put(x, y, tile)
:DESCR
void put(int x, int y, string tile)
Puts a tile at the specified location on the board

:COMMAND
putitem(handle, x, y, layer)
:DESCR
void putitem(variant handle, int x, int y, int layer)
Place the item on the board at the given location

:COMMAND
putplayer(handle, x, y, layer)
:DESCR
void putplayer(string handle, int x, int y, int layer)
Place the player on the board at the given location

:COMMAND
random(max, [&ret])
:DESCR
int random(int max, [int &ret])
Generate a random number from one to the supplied maximum, inclusive

:COMMAND
regExpReplace(subject, pattern, replace)
:DESCR
string regExpReplace(string subject, string pattern, string replace)
Replace using a regular expression

:COMMAND
remove(handle, location)
:DESCR
void remove(variant handle, int location)
Remove an equipped item and return it to the inventory

:COMMAND
removePlayer(handle)
:DESCR
void removePlayer(string handle)
Remove a player from the party [to an old player list]

:COMMAND
removeStatus(target, file)
:DESCR
void removeStatus(string target, string file)
Remove a status effect from a fighter

:COMMAND
rendernow(draw)
:DESCR
void rendernow(bool draw)
Controls rendering of the cnvRenderNow reserved canvas

:COMMAND
replace(str, find, replace[, &dest])
:DESCR
string replace(string str, string find, string replace[, string &dest])
Replace within a string

:COMMAND
reset()
:DESCR
void reset()
Reset the game

:COMMAND
restorePlayer(filename)
:DESCR
void restorePlayer(string filename)
Restore a player who was previously on the team

:COMMAND
restorescreen([x1, y1, x2, y2, xdest, ydest])
:DESCR
void restorescreen([int x1, int y1, int x2, int y2, int xdest, int ydest])
Draw a buffered screen capture to the screen

:COMMAND
restorescreenarray(pos [,x1, y1, x2, y2, xdest, ydest])
:DESCR
void restorescreenarray(int pos [,int x1, int y1, int x2, int y2, int xdest, int ydest])
Draw a buffered screen capture to the screen

:COMMAND
resumeNext()
:DESCR
void resumeNext()
Return to the statement after the statement where an error occurred

:COMMAND
right(str, amount, [&ret])
:DESCR
string right(string str, int amount, [string &ret])
Get characters from the right of a string

:COMMAND
rpgCode(line)
:DESCR
void rpgCode(string line)
Independently run a line of RPGCode

:COMMAND
run(program)
:DESCR
void run(string program)
Transfer control to a different program

:COMMAND
save(file)
:DESCR
void save(string file)
Save the current game state to a file

:COMMAND
savescreen([position = 0])
:DESCR
void savescreen([int position = 0])
Save the current screen onto a canvas that can be restored at a later time

:COMMAND
scan(x, y, pos)
:DESCR
void scan(int x, int y, int pos)
Save the tile specified to a buffer identified by pos

:COMMAND
send(file, x, y, [z = 1])
:DESCR
void send(string file, int x, int y, [int z = 1])
Send the player to a new board

:COMMAND
setAmbientLevel(red, green, blue)
:DESCR
void setAmbientLevel(int red, int green, int blue)
Set the global ambient level

:COMMAND
setbutton(file, slot, x, y, width, height)
:DESCR
setbutton(string file, int slot, int x, int y, int width, int height)
Create and draw a clickable button at screen pixel co-ords x, y that persists until clearButtons() is called

:COMMAND
setconstants(...)
:DESCR
setconstants(...)
Description

:COMMAND
setErrorHandler(lbl)
:DESCR
void setErrorHandler(label lbl)
Set an error handler for the current function

:COMMAND
setImage(str, x, y, width, height, [cnv])
:DESCR
void setImage(string str, int x, int y, int width, int height, [canvas cnv])
Set an image

:COMMAND
setImageAdditive(file, x, y, width, height, percent[, cnv])
:DESCR
void setImageAdditive(string file, int x, int y, int width, int height, double percent[, canvas cnv])
Set an image with a tint of the specified percent

:COMMAND
setImageTranslucent(file, x, y, width, height, [cnv])
:DESCR
void setImageTranslucent(string file, int x, int y, int width, int height, [canvas cnv])
Set an image translucently

:COMMAND
setImageTransparent(file, x, y, width, height, r, g, b, [cnv])
:DESCR
void setImageTransparent(string file, int x, int y, int width, int height, int r, int g, int b, [canvas cnv])
Set an image with a transparent colour

:COMMAND
setMwinTranslucency(percent)
:DESCR
void setMwinTranslucency(int percent)
Set the translucency of the message window

:COMMAND
setPixel(x, y, [cnv])
:DESCR
void setPixel(int x, int y, [canvas cnv])
Set a pixel in the current colour

:COMMAND
setResumeNextHandler()
:DESCR
void setResumeNextHandler()
Cause errors in the current function to be silently ignored

:COMMAND
setvolume(percent)
:DESCR
void setvolume(int percent)
Set the volume of all music and sound using a value between 0 and 100

:COMMAND
shopcolors(index, r, g, b)
:DESCR
shopcolors(int index, int r, int g, int b)
Set the colors used in CallShop()

:COMMAND
sin(x, [&ret])
:DESCR
double sin(double x, [double &ret])
Calculate sine x

:COMMAND
smartStep()
:DESCR
void smartStep()
Toggle "smart" stepping

:COMMAND
smp(handle, value)
:DESCR
void smp(string handle, int value)
Set a fighter's smp

:COMMAND
sound()
:DESCR
void sound()
Obsolete

:COMMAND
sourcehandle([&ret])
:DESCR
string sourcehandle([string &ret])
Get the handle of the source object

:COMMAND
sourcelocation(&x, &y)
:DESCR
void sourcelocation(int &x, &int y)
Get the location of the source object

:COMMAND
spliceVariables(str)
:DESCR
string spliceVariables(string str)
Replaces substrings within angle brackets by the value of variables with respective names

:COMMAND
split(str, delimiter, arr)
:DESCR
int split(string str, string delimiter, array arr)
Splits a string at a delimiter

:COMMAND
spriteTranslucency(percent)
:DESCR
void spriteTranslucency(int percent)
Set the degree to which sprites drawn underneath other objects are visible

:COMMAND
spriteTranslucency(void)
:DESCR
int spriteTranslucency(void)
Set the degree to which sprites drawn underneath other objects are visible

:COMMAND
sqrt(x, [&ret])
:DESCR
double sqrt(double x, [double &ret])
Calculate the square root of x

:COMMAND
stance(id [, player])
:DESCR
stance(int id [, handle player])
Show a player stance

:COMMAND
start(file)
:DESCR
void start(string file)
Open a file with the shell

:COMMAND
staticText()
:DESCR
void staticText()
obsolete

:COMMAND
takeGp(gp)
:DESCR
void takeGp(int gp)
Take gold pieces

:COMMAND
takeItem(itm)
:DESCR
void takeItem(string itm)
Remove an item from the inventory

:COMMAND
tan(x, [&ret])
:DESCR
double tan(double x, [double &ret])
Calculate tangent x

:COMMAND
targethandle([&ret])
:DESCR
string targethandle([string &ret])
Get the handle of the target object

:COMMAND
targetlocation(&x, &y)
:DESCR
void targetlocation(int &x, &int y)
Get the location of the target object

:COMMAND
tellThread(id, code)
:DESCR
variant tellThread(thread id, string code)
Execute code in the context of a thread (e

:COMMAND
text(x, y, str, [cnv])
:DESCR
void text(double x, double y, string str, [canvas cnv])
Displays text on the screen

:COMMAND
textSpeed(speed)
:DESCR
void textSpeed(int speed)
Obsolete

:COMMAND
thread(file, persist, [&ret])
:DESCR
thread thread(string file, bool persist, [thread &ret])
Start a thread

:COMMAND
threadSleep(id, seconds)
:DESCR
void threadSleep(thread id, double seconds)
Put a thread to sleep

:COMMAND
threadSleepRemaining(id, [&ret])
:DESCR
double threadSleepRemaining(thread id, [double &ret])
Check how much sleep remains for a thread

:COMMAND
threadWake(id)
:DESCR
void threadWake(thread id)
Wake up a thread

:COMMAND
tileType(x, y, type, [z = 1])
:DESCR
void tileType(int x, int y, string type, [int z = 1])
Change a tile's type

:COMMAND
trim(str, [&ret])
:DESCR
string trim(string str, [string &ret])
Trim whitespace from a string

:COMMAND
ucase(str, [&ret])
:DESCR
string ucase(string str, [string &ret])
Convert a string to uppercase

:COMMAND
underArrow()
:DESCR
void underArrow()
Toggle the under arrow

:COMMAND
underline(enable)
:DESCR
void underline(bool enable)
Toggle underlining of text

:COMMAND
viewbrd(filename [, x, y [, cnv]])
:DESCR
void viewbrd(string filename [, int x, int y [, canvas cnv]])
Draw a board to the screen or to a canvas, starting at co-ordinates topX, topY

:COMMAND
wait([&ret])
:DESCR
string wait([string &ret])
Wait for a key to be pressed, and return the key that was

:COMMAND
walkSpeed()
:DESCR
void walkSpeed()
Obsolete

:COMMAND
wander(target, [restrict = 0])
:DESCR
void wander(variant target, [int restrict = 0])
The first parameter accepts either a string that can be either "target" or "source" or the number of an item

:COMMAND
wav(file)
:DESCR
void wav(string file)
Play a wave file (e

:COMMAND
wavstop()
:DESCR
void wavstop()
Stop the current sound effect

:COMMAND
win()
:DESCR
void win()
Obsolete

:COMMAND
winColor(dos)
:DESCR
void winColor(int dos)
Set the message window's colour using a DOS code

:COMMAND
winColorRgb(r, g, b)
:DESCR
void winColorRgb(int r, int g, int b)
Set the message window's colour

:COMMAND
windows()
:DESCR
void windows()
Exit to windows

:COMMAND
winGraphic(file)
:DESCR
void winGraphic(string file)
Set the message window background image

:COMMAND
wipe(file, effect [, speed])
:DESCR
wipe(string file, int effect [, int speed])
Wipe' a graphic to the screen

:COMMAND
zoom(percent)
:DESCR
zoom(int percent)
Zoom into the centre of the board by the specified percent

