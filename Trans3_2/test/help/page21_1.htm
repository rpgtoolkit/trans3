<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<h2><a href="page17.htm">RPGCode</a> &mdash; <a href="page21.htm">Object Oriented Coding</a> &mdash; Old vs. New</h2>

<div id="primer">

<h3>old</h3>

<p>
RPGC3 attempts to provide new, more intuitive, ways to structure your code. For example, observe how you might code a date entity previously:
</p>

<pre>
// February 22nd, 2004 -- date index 1
dateMonth[1]! = 2
dateDay[1]! = 22
dateYear[1]! = 2004

// Show the date
showDate(1)

// Method to show a date
method showDate(idx!)
{
	month[1]$ = "January"
	month[2]$ = "February"
	month[3]$ = "March"
	month[4]$ = "April"
	month[5]$ = "May"
	month[6]$ = "June"
	month[7]$ = "July"
	month[8]$ = "August"
	month[9]$ = "September"
	month[10]$ = "October"
	month[11]$ = "November"
	month[12]$ = "December"
	saveScreen()
	clear()
	pixelText(10, 7, month[dateMonth[idx!]!]$)
	pixelText(14 + getTextWidth(month[dateMonth[idx!]!]$), 7, _
	  CastLit(dateDay[idx!]!) + ", " + CastLit(dateYear[idx!]!))
	wait()
	restoreScreen()
}
</pre>

<p>
While this approach may work, it has a number of flaws. First, and most serious, the names of the globals you use the set the date may not be easy to remember - especially to programmers other than yourself who are trying to use your code. While you could create functions to set these vars, the resulting overhead would be unacceptable. And if you decided to change how a date was implemented at a later time, changing the globals used, for example, you would have to manually modify the code everywhere a date was used. What is needed is some way to keep the data and the functions surrounding it tightly knit.
</p>

<h3>new</h3>

<p>
Classes provide a way in which to define data and functions that operate on the data in one location. When you create a class, you are creating a new data type that can be created like any other type of variable (namely numerical and literal as RPGCode goes). Using classes, we could re-write the date entity as follows:
</p>

<pre>
// A date
class CDate
{

	// Public visibility
	public:

		// Constructor
		method CDate(month!, day!, year!)

		// Display the date
		method display()

	// Private visibility
	private:

		m_month!	// Month
		m_day!	// Day
		m_year!	// Year

}

// CDate - constructor
method CDate::CDate(month!, day!, year!)
{
	// Copy over to members
	m_month! = month!
	m_day! = day!
	m_year! = year!
}

// Display the date
method CDate::display()
{
	month[1]$ = "January"
	month[2]$ = "February"
	month[3]$ = "March"
	month[4]$ = "April"
	month[5]$ = "May"
	month[6]$ = "June"
	month[7]$ = "July"
	month[8]$ = "August"
	month[9]$ = "September"
	month[10]$ = "October"
	month[11]$ = "November"
	month[12]$ = "December"
	saveScreen()
	clear()
	pixelText(10, 7, month[m_month!]$)
	pixelText(14 + getTextWidth(month[m_month!]$), 7, _
	 CastLit(m_day!) + ", " + CastLit(m_year!))
	wait()
	restoreScreen()
}
</pre>

<p>
The code you see above may seem complicated, but really it's not. The class CDate line defines a beginning a class - CDate. Within a class we have two visibilities - public and private. Using public: and private: lines changes the current visibility. In the public visibility you should place the declarations of methods (and optionally their code, but this is not recommended for complicated classes), whereas the private visibility houses variables and functions that cannot be accessed from outside the class.
</p>

</div>

<hr />
<p>
<a href="page21.htm">previous</a>, <a href="page21_2.htm">forward</a>
</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
