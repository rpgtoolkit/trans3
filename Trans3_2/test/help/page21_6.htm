<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<h2><a href="page17.htm">RPGCode</a> &mdash; <a href="page21.htm">Object Oriented Coding</a> &mdash; Polymorphism</h2>

<div id="primer">

<p>
Something you often need do in programming is express a relationship between types. Whether it be different types of numbers, jobs in an office, one class should be somehow expressed as a type of another. In object oriented programming we often express this relationship using inheritance. In inheritance, the inheriting class - or derived class - obtains all the functions and variables of the class being inherit, the base class.
</p>

<p>
In RPGCode, classes can have an unlimited number of bases and they are set like this:
</p>

<pre>
class CDerived [: CBaseOne, CBaseTwo, ...]
</pre>

<p>
Take this number class, for example:
</p>

<pre>
// A number
class CNumber
{

	// Public visibility
	public:

		// Constructor
		method CNumber(num!)

		// Cast to numerical
		method operator!() { returnMethod(m_val!) }

		// Alter the number
		method operator=(newVal!)

	// Private visibility
	private:

		m_val!	// Value of the number

}

// CNumber - constructor
method CNumber::CNumber(num!)
{
	// Copy value to a member
	m_val! = num!
}

// CNumber - assignment operator
method CNumber::operator=(newVal!)
{
	m_val! = newVal!
}
</pre>

<p>
The CNumber class provides basic functionality for a number. It does not, however, have functions specific to the type of number being manipulated. If you want to manipulate a fraction, for example, you might code a class like this:
</p>

<pre>
// A fraction
class CFraction: CNumber
{

	// Public visibility
	public:

		// Constructor
		method CFraction(top!, bottom!)

		// Get the top
		method getTop() { returnMethod(m_top!) }

		// Get the bottom
		method getBottom() { returnMethod(m_bottom!) }

		// Override the = operator
		method operator=(CFraction newVal)

	// Private visibility
	private:

		m_top!	// Top of the fraction
		m_bottom!	// Bottom of the fraction

}

// CFraction - constructor
method CFraction::CFraction(top!, bottom!)
{
	// Copy params to members
	m_top! = top!
	m_bottom! = bottom!
	m_val! = m_top! / m_bottom!
}

// CFraction - assignment operator
method CFraction::operator=(CFraction newVal)
{
	m_top! = newVal->m_top!
	m_bottom! = newVal->m_bottom!
	// Also set the base class' value member
	m_val! = m_top! / m_bottom!
}
</pre>

<p>
Note how the derived class can override the base class' methods. In some situations, you would expect that a method be overloaded every single time. Such relationships can be expressed using a pure virtual function. One can be defined like so:
</p>

<pre>
method pureVirtual(...) = 0
</pre>

<p>
No implementation for the method should be provided, and as such, a class containing even one pure virtual method cannot be created directly - only used a parameter, or inherited.
</p>

<p>
As shown, polymorphism makes it easy to express relationships between classes.
</p>

</div>

<hr />
<p>
<a href="page21_5.htm">previous</a>, <a href="page22.htm">forward</a>
</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
