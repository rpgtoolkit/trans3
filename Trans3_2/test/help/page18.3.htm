<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<div id="primer">
<h2><a href="page17.htm">RPGCode</a> &mdash; <a href="page18.htm">Language Features</a> &mdash; Creating Functions</h2>
<h3 style="margin-bottom: 10px;">Contents</h3>
<a href="#funcs">Functions</a>
<ul style="margin-bottom: 15px">
	<li><a href="#funcs.basics">The basics</a></li>
	<li><a href="#funcs.return">Returning values</a></li>
	<li><a href="#funcs.params">Parameters and arguments</a></li>
	<li><a href="#funcs.inclusion">Including files</a></li>
	<li><a href="#funcs.overload">Overloading functions</a></li>
	<li><a href="#funcs.inline">Inline expansion</a></li>
	<li><a href="#funcs.references">References</a></li>
</ul>

<hr />

<a name="funcs"></a>
<h3>Functions</h3>

<p>
In RPGCode, and all other modern scripting and programming languages, a programmer may define their own functions to facilitate performing certain tasks wherever it is needed with a single line of code. Learning to take advantage of this will help you structure your code more clearly, shorten your code where a few function calls might be more appropriate than a few blocks of code that all do the same thing, and it will make your life less complicated (at least when coding). 
</p>



<a name="funcs.basics"></a>
<h4>The Basics:</h4>

<p>
The definition of a function consists of multiple parts: The declaration keyword <code>function</code>, the name of the function followed by the parameter list, an opening curly brace, the body of the function, and a closing curly brace. Here is an example of what a function might look like:
</p>

<pre>
function name(<em>parameter1</em>, <em>parameter2</em>, <em>etc</em>)
{
	// Code to execute is inserted here.
}
</pre>

<p>
Perhaps a little more involved than previous constructs we've explored, but it is simple enough! The above function would do nothing, so let's create a very basic one that <em>does</em> do something.
</p>

<pre>
function test()
{
	mwin("This is a test!");
	wait();
	mwinCls();
}
</pre>

<p>
This function shows the string "This is a test!" in the message window, waits for the user to press a key, and then clears the message window from the screen. But how do you call the function? The exact same way you would call a built-in function if its name were <em>test</em>:
</p>

<pre>
test()
</pre>



<a name="funcs.return"></a>
<h4>Returning Values:</h4>

<p>
Just as we saw that some built-in functions return values, user-defined functions may also return values. This is done with a <code>return</code> statement inside the function. A return statement takes on the following form:
</p>

<pre>
return <em>expression</em>
</pre>

<p>
The <em>expression</em> is, as with the control structures discussed earlier, any valid expression that can be made in RPGCode, and the resulting value is returned. When the return statement of a function is reached, execution of the function stops and any code inside the function after the return statement will not be run. Here is an example that returns the result of the expression <code>5 + 5</code>:
</p>

<pre>
function add()
{
	return 5 + 5;
}

x = add();
mwin(x);
wait();
</pre>



<a name="funcs.params"></a>
<h4>Parameters and Arguments:</h4>

<p>
Expanding on where we left off in the basics section of this manual, an argument is data that is passed to a parameter; a parameter is a variable which recieves an argument (the data). (Sometimes people use the two terms interchangeably.) You may define your functions with any number of parameters, each of which is given a unique name and separated by commas. Here is the same function we used earlier, except that it takes two parameters, <code>x</code> and <code>y</code>, and adds them together, instead of two constant values.
</p>

<pre>
function add(x, y)
{
	return x + y;
}

z = add(2, 3);
mwin(z);
wait();
</pre>

<p>
The <code>add</code> function is declared with the two aforementioned parameters. In the body of the function, the two parameter variables are added together and the result is passed on to the <code>return</code> construct. When the function is called, the result is stored in the variable <code>z</code>. <code>z</code> is then displayed via the <code>mwin</code> function.</p>

<p>
Parameter variables are automatically deleted from memory when the function finishes executing, and you do not need to worry about parameter names conflicting with variable names in your code (ie., if you have defined a variable called <code>x</code> and a function parameter with the same name, they will effectively be different variables).
</p>



<a name="funcs.inclusion"></a>
<h4>Including Files:</h4>

<p>
Up to this point all of our functions have been defined and called in the same file, but if a function has to be defined in whatever file it is called in, it isn't very useful (but it isn't useless either). Thankfully, functions may be saved into different files and included where they are needed. This makes them much more accessible. You can include an rpgcode file into another file with the <code>#include</code> directive:
</p>

<pre>
// Include the file "math.prg", which defines the add() function.
#include "math.prg"

mwin(add(7, 9));
wait();
</pre>

<p>
This assumes that the <code>add</code> function was saved in the file <em>math.prg</em>. Several functions may be defined in the same file. (Note that if an included file contains "loose" code outside of a function, it will not be run.) You may also use the <code>include()</code> function, as in:
</p>

<pre>
include("math.prg");
</pre>

<p>
RPGCode also supports "implicit" inclusion, where the function is called in the format <code>fileName.functionName()</code>. For example, using implicit inclusion the above program can be written as:
</p>

<pre>
mwin(math.add(7, 9));
wait();
</pre>

<p>
When a function is called with implicit inclusion, the file is automatically included so you do not need to keep prefixing function calls with the file name and dot (but you can if you want to). 
</p>



<a name="funcs.overload"></a>
<h4>Overloading Functions:</h4>

<p>
Function overloading allows you to define multiple functions that have the same name and a different parameter list. This is an especially useful feature when you are implementing a function that may not require all of the parameters each time it is called: Instead you would like to be able to define what the function should do depending on what arguments it recieves.
</p>

<pre>
function add(a, b)
{
	return a + b;
}
function add(a, b, c)
{
	return a + b + c;
}
function add(a, b, c, d)
{
	return a + b + c + d;
}

// etc...
</pre>

<p>
In this example we have written three <code>add</code> functions. The first one adds two numbers, the second adds three numbers, and the third adds four numbers. It is certainly much cleaner than writing one function with many parameters and expecting the programmer using the function to work around the parameters that aren't needed. However, it is sometimes more beneficial to call one of the overloaded functions inside of another to circumvent reimplementing the same function multiple times. For example, you could write the above three functions like this:
</p>

<pre>
function add(a, b)
{
	return add(a, b, 0, 0);
}
function add(a, b, c)
{
	return add(a, b, c, 0);
}
function add(a, b, c, d)
{
	return a + b + c + d;
}
</pre>

<p>
When using these rewritten functions, you would not notice a difference. The advantage is that if you want to change the behavior of the third <code>add</code> function, you would not have to change the others to behave the same way since they are just calling that one function.
</p>



<a name="funcs.inline"></a>
<h4>Inline Expansion:</h4>

<p>
An inline function is a function whose body is semantically inserted into the program where it is called. This can be achieved with functions by placing the <code>inline</code> keyword before the <code>function</code> keyword. Going back to the <code>add</code> function again, we can further improve it by inlining it.
</p>

<pre>
inline function add(x, y)
{
	return x + y;
}

z = add(2, 3);
mwin(z);
wait();
</pre>

<p>
The function call site will be transformed at run-time into this:
</p>

<pre>
z = x + y;
</pre>

<p>
By inlining simple functions, an increase in performance can be gained where a normal function call might be slower. A larger, more complex function, especially if it is called multiple times, may not gain any significant increase in performance, so it's best to only inline simpler functions.
</p>



<a name="funcs.references"></a>
<h4>References</h4>

<p>
As of version 3.1.0, RPGCode supports passing arguments by reference. When you pass an argument by reference into a function, you are not copying the value of the argument; the parameter is rather turned into an alias of the argument (ie., any operations made on the reference variable will also affect the variable that was passed in as the argument). You can make a parameter take arguments by reference by prefixing the parameter name with an ampersand (<code>&amp;</code>).

<p>
For example, using references we can implement a function that swaps the values of two variables:
</p>

<pre>
function swap(&amp;x, &amp;y)
{
	temp = x;
	x = y;
	y = temp;
}

a = "hello";
b = "world";

mwin(a + " " + b);
swap(a, b);
mwin(a + " " + b);
wait();
</pre>

<p>
Try running that example. You should see that it shows "hello world", waits for a key press, then swaps the values of <code>a</code> and <code>b</code> and shows "world hello".
</p>

<p>
When you pass an argument into a function by reference, the argument must not be an expression like <code>5</code>, <code>1 + 1</code>, or <code>"hello!"</code>; it must always be an actual variable. An error will be raised otherwise.
</p>

<p>
But RPGCode does not only support parameter references: it also allows functions to return references. You might think of functions returning references as synonymous with the reference variable that they return, and they may even be on the left-hand side of an assignment operation (eg., <code>func() = someValue</code>). To return a reference variable from a function, you need to prefix it with an ampersand, like you would with parameters:
</p>

<pre>
function someRef()
{
	return &amp;ref;
}

someRef() = "References galore!";
mwin(someRef());
wait();
</pre>



</div>

<hr />

<p>
<a href="page18.2.htm">previous</a>, <a href="page18.4.htm">forward</a>
</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
