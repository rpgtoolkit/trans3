<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<h2><a href="page17.htm">RPGCode</a> &mdash; <a href="page21.htm">Object Oriented Coding</a> &mdash; Overloading Operators</h2>

<div id="primer">

<p>
Say - using the CDate class - you wanted to reassign an object's date. You might think the following syntax would be legal:
</p>

<pre>
p = CDate(1, 31, 2005)

// Later...
p = CDate(2, 22, 1922)
</pre>

<p>
But all this does is reassigns p to a new object altogether; the original object still exists, but you can no longer access it - this is called a memory leak. But what else can you do? You have no way to access the individual components of the date. Let's remedy that now:
</p>

<pre>
class CDate
{

	// Public visibility
	public:

		// Constructor
		method CDate(month!, day!, year!)

		// Display the date
		method display()

		// Interface methods
		method getMonth() { returnMethod(m_month!) }
		method getDay() { returnMethod(m_day!) }
		method getYear() { returnMethod(m_year!) }

		// Assignment operator
		method operator=(CDate otherDate)

	// Private visibility
	private:

		m_month!	// Month
		m_day!	// Day
		m_year!	// Year

}
</pre>

<p>
Since the three methods I've added are so short, I've simply placed their bodies in the actual class. Note that the CDate and display methods are not shown again here, but they are still part of the class.
</p>

<p>
You'll also have noticed that I've added the definition for a method we've not yet coded: operator=. Methods named as operator* (where * is an operator) allow you to code new behavior for operators when used on instances of a class. We'll implement operator= as follows:
</p>

<pre>
// CDate - assignment operator
method CDate::operator=(CDate otherDate)
{
	// Copy the other date's members to this date
	m_month! = otherDate->m_month!
	m_day! = otherDate->m_day!
	m_year! = otherDate->m_year!
}
</pre>

<p>
Now the following is valid:
</p>

<pre>
p = CDate(1, 31, 2005)

// Later...
p = CDate(2, 22, 1922)
</pre>

<p>
What if we wanted to display the date ourselves? We could create a function that returns a string and call it, but a more logical approach would be if we could somehow make it possible to use the object where literal variables can be used. We'll place this in the public visibility of CDate:
</p>

<pre>
// Cast to literal
method operator$()
</pre>

<p>
And for its implementation:
</p>

<pre>
// CDate - cast to literal
method CDate::operator$()
{
	month[1]$ = "January"
	month[2]$ = "February"
	month[3]$ = "March"
	month[4]$ = "April"
	month[5]$ = "May"
	month[6]$ = "June"
	month[7]$ = "July"
	month[8]$ = "August"
	month[9]$ = "September"
	month[10]$ = "October"
	month[11]$ = "November"
	month[12]$ = "December"
	returnMethod(month[m_month!]$ + " " + CastLit(m_day!) + _
	 ", " + CastLit(m_year!)
}
</pre>

<p>
This makes the following code execute as desired:
</p>

<pre>
p = CDate(1, 31, 2005)

// Output p to the debug window
debugger(p)

p->release()
</pre>

<p>
Note that only one of operator$ and operator! can be overloaded, at present. All operators, with the exception of -> and . can be overloaded.
</p>

</div>

<hr />
<p>
<a href="page21_2.htm">previous</a>, <a href="page21_4.htm">forward</a>
</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
