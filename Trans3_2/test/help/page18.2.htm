<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<div id="primer">
<h2><a href="page17.htm">RPGCode</a> &mdash; <a href="page18.htm">Language Features</a> &mdash; Program Flow</h2>

<h3 style="margin-bottom: 10px;">Contents</h3>

<a href="#con">Programming constructs</a>
<ul style="margin-bottom: 0;">
	<li><a href="#con.if">The if statement</a></li>
	<li><a href="#con.else">Else and elseif</a></li>
	<li><a href="#con.practical">First practical program</a></li>
	<li><a href="#con.while">The while loop</a></li>
	<li><a href="#con.for">The for loop</a></li>
	<li><a href="#con.switch">The switch statement</a></li>
</ul>
<a href="#operators">Operators</a>
<ul style="margin-bottom: 0">
	<li><a href="#operators.arithmetic">Arithmetic</a></li>
	<li><a href="#operators.comparison">Comparison</a></li>
	<li><a href="#operators.bitwise">Bitwise</a></li>
	<li><a href="#operators.other">Other</a></li>
</ul>


<hr />







<a name="con"></a>

<h3>Programming Constructs</h3>



<p>

Up to this point, we've seen how to work with functions and variables, but the example programs haven't been particularly useful (save for the purpose of learning!). In this section, we will take a look at how different decisions can be made in our code to make our programs more useful in situations that we might face in-game. So I'll start you off by getting your feet wet in the world of constructs and program flow before we plunge into our first practical program.

</p>







<a name="con.if"></a>

<h4>The If Statement:</h4>



<p>

How does a program pop up a menu when you click a button? How does it respond when you provide input? To begin with, many programs that you write will need to do a certain amount of decision making. Decisions are made when conditions are met. Program flow is dependent on these conditional statements and decisions. One such construct is the <em>if control structure</em>, that allows certain code to run if the given expression evaluates to a non-zero value. In RPGCode, an if statement looks like this:

</p>



<pre>
if (<em>expression</em>)
{
	<em>statements</em>
}
</pre>



<p>

As said just before, <em>statements</em> will only be run if <em>expression</em> evaluates to a non-zero value. This can be any valid expression in RPGCode. <em>Statements</em> can be one or more RPGCode statements.

</p>



<p>

When I say that something is evaluated to a non-zero value, it means that the <em>expression</em> produces a result like 1, 15, -2, etc. As long as it is not 0, the code associated with the if control structure will be executed. To give you an example of what this means, try running the following code:

</p>



<pre>
if (0)
{
	mwin("This will not run.");
	wait();
}
if (1)
{
	mwin("This will run. :)");
	wait();
}
</pre>



<p>

You should see that the code in the first construct, where the expression is 0 (<code>if (0)</code>) does not run, but the code in the second where the expression is non-zero (<code>if (1)</code>) <em>is</em> run.

</p>



<p>

But how does this help in a real game situation? Like I said, any valid expression may be given to an if statement &mdash; not just numbers, but variables, comparisons, the return value of a function, etc. In the next example, we will see how to compare two values in an if statement with the <em>equality operator</em>.

</p>


<pre>
x = 5;

if (x == 0)
{
	mwin("This will not run.");
	wait();
}
if (x == 5)
{
	mwin("This will run. :)");
	wait();
}
</pre>



<p>

Here, we first set the variable <code>x</code> to 5. Then, we use an if statement to compare <code>x</code> to the value 0. The equality operator can be thought of as a function: If the operand on the left (<code>x</code>) is equal to the operand on the right (0), then it returns 1, otherwise it returns 0. Since <code>x</code> is not equal to 0, the expression <code>x == 0</code> will evaluate to 0 and the code associated with the first if statement will not be run.

</p>



<p>

However, the second if statement uses the expression <code>x == 5</code>. <code>x</code> <em>is</em> equal to 5, and so this expression will return 1, and the code associated with this if statement will be run. Try it out! A list of <a href="#operators.comparison">comparison operators</a> can be found at the bottom of this page, and I encourage that you play with a few.

</p>



<p class="boxedText">

Please note that there are times when you should omit the semi-colon at the end of a statement. In the previous examples, there are no semi-colons after the if statement or curly braces. Here's a simple rule: If the next line should be an opening curly brace ({), or the line itself is just an opening or closing curly brace, don't use the semi-colon.

</p>







<a name="con.else"></a>

<h4>Else and ElseIf:</h4>



<p>

Testing the equality of one expression and then another works fine, but sometimes you will have a situation where the control structure needs to encompass more than just two equality comparisons; you may instead want to test for the equality of one variable, and if that evaluates to 0, you want to have something to fall back on regardless of what the variable actually is: So enters the <em>else statement</em>.
</p>

<pre>
x = 5;

if (x == 5)
{
	mwin("x is equal to 5!");
	wait();
}
else
{
	mwin("x is not equal to 5!");
	wait();
}
</pre>



<p>

If you run this example, the message "x is equal to 5!" will be shown on the screen, because the expression in the if statement returns 1. Try changing the value of <code>x</code>. If it is something other than 5, the first conditional expression will return 0 and the code associated with the if statement will not be run, but the code associated with the else statement will automatically run. An else statement is only ever run if the preceding if statement is not run, otherwise it is skipped.

</p>



<p>

But what if you wanted to retain the first two if statements from the first example and still include the else statement? The else statement is <em>only</em> considerate of the preceding if statement. That is to say, if the first if statement's associated code is run and the second if statement's isn't, but the second if statement has an else statement attached, the else statement will still run! A little confusing? Try this code to see what I mean:

</p>

<pre>
x = 5;

if (x == 5)
{
	mwin("This will run as intended.");
}
if (x == 0)
{
	mwin("This won't run!");
}
else
{
	mwin("This will run, but it wasn't intended to!");
}

wait();
</pre>



<p>

In this example, the first conditional expression, <code>x == 5</code>, is evaluated to 1, and so the following <code>mwin</code> is run; the second conditional expression is evaluated to 0 and so the code after is not run; the else statement will run, though it is not intended to, because the previous expression in the if statement was not evaluated to 1.

</p>



<p>
However, this is very easy to fix: The <em>elseif statement</em> can be used to link multiple if statements to a final else statement. Try the code once more, but instead of two if statements, we will be replacing the second with an elseif statement:
</p>

<pre>
x = 5;

if (x == 5)
{
	mwin("x is equal to 5.");
}
elseif (x == 0)
{
	mwin("x is equal to 0.");
}
else
{
	mwin("x is not equal to either 5 or 0.");
}

wait();
</pre>



<p>

As you can see, with the use of control structures like if, elseif, and else, you can control the flow of a program so that some parts are only conditionally executed. Experiment with them and with the operators that are discussed later on and see what you can come up with!

</p>







<a name="con.practical"></a>

<h4>First Practical Program:</h4>



<p>

Now we're going to put together all the things we've learned so far (functions, variables, conditional expressions, etc.) and create a program that asks the user for input, and depending on the input that's given, we will decide what to output to the message window.

</p>

<pre>
mwin("You should try typing something. Here are your options:");
mwin("Press 1 and I'll tell you a secret.");
mwin("Press 2 and I'll tell you another secret.");
input = wait();
mwinCls();

if (input == 1)
{
	mwin("There's still more to learn after this!");
	wait();
}
elseif (input == 2)
{
	mwin("It's always good to indent code between curly braces with tabs!");
	wait();
}
</pre>



<p>

Firstly, three lines of text are displayed in the message window, giving the user their options. Then the <code>wait</code> function is used to retrieve what key the user pressed on their keyboard. The returned value is stored in the variable <code>input</code>. Next, the message window is cleared with <code>mwinCls</code>, and we evaluate the expression <code>input == 1</code> in the first if statement. If it is evaluated to 1 (the user pressed the 1 key), then we show a message in the message window. If it is not, then we try to evaluate the next elseif statement's expression.

</p>



<p>

The program works, but we are presented with a problem: What happens if the user presses a key other than 1 or 2? We only expect those two to be pressed. We could add an else statement, but what if we want to have them try again if they press the wrong key? This is explained next.

</p>







<a name="con.while"></a>

<h4>The While Loop:</h4>



<p>

The <em>while loop</em> is another control structure which allows you to repeat one or more statements <em>while</em> the conditional expression evaluates to 1. The form of a while control structure is as follows:

</p>


<pre>
while (<em>expression</em>)
{
	<em>statements</em>
}
</pre>



<p>

As you can see, this is very similar to the if statement, the only difference in its appearance is that it uses the <code>while</code> keyword instead of <code>if</code>. It works in much the same way, but when there are no more statements left to run in the while control structure, the expression is reevaluated, and if it still returns 1, the statements repeat; this happens until the expression returns 0.

</p>


<pre>
count = 0;
while (count &lt; 5)
{
	count++;
	mwin(count);
}
wait();
</pre>



<p>

If you run this code, you will see the numbers 1, 2, 3, 4, and 5 shown in the message window. The expression <code>count &lt; 5</code> will evaluate to 1 if the left operand, <code>count</code>, is <em>less than</em> the right operand, 5. <code>count</code> is initially set to 0, so this will evaluate to 1 (it is less than 5). The first statement associated with the while loop, <code>count++</code>, just adds 1 to the variable <code>count</code>. When it is shown in the message window the first time, it will show the number 1. Since there are no more statements, the expression is reevaluated: <code>count</code> is now 1, but it is still less than 5, so the statements will be run again. <code>count</code> is incremented to 2, and 2 is shown in the message window. This goes on until <code>count</code> is equal to 5.

</p>



<p>

Let's revisit our program that asks for user input, and this time we will use a while loop to repeat the code until the user presses the desired keys: 1 or 2.

</p>


<pre>
mwin("You should try typing something. Here are your options:");
mwin("Press 1 and I'll tell you a secret.");
mwin("Press 2 and I'll tell you another secret.");
input = wait();

bLoop = true;
while (bLoop)
{
	
	if (input == 1)
	{
		mwinCls();
		mwin("There's still more to learn after this!");
		bLoop = false;
	}
	elseif (input == 2)
	{
		mwinCls();
		mwin("It's always good to indent code between curly braces with tabs!");
		bLoop = false;
	}
	
	input = wait();
	
}
</pre>



<p>

If you press the wrong key when running this program, it will wait for you to press another key. It will keep looping until you press 1 or 2, and once you finally do, the program will end. There are two new things here though: The values <code>true</code> and <code>false</code> are used in the code, assigned to a variable.

</p>



<p>

These are the boolean true and false values, and in RPGCode they are synonymous with 1 and 0 respectively. When <code>bLoop</code> is assigned <code>true</code>, and then it is given to the while loop as its expression, it is like writing <code>while (1)</code> (and as we learned earlier, the code associated with a control structure like if or while will be run if the conditional expression returns 1).

</p>



<p>

When the user presses 1 or 2 and either the if or elseif code is run, <code>bLoop</code> is set to <code>false</code>. Since <code>false</code> is synonymous with 0, when the while loop reevaluates the expression, 0 is returned and it will not loop.

</p>



<p>

While loops, if statements, and the like can all be very powerful ways to control the flow of a program: You can make events happen once, multiple times, or not at all depending on conditional expressions. In almost any programming application, whether it's coding with RPGCode or otherwise, you will find yourself using these constructs a lot.

</p>







<a name="con.for"></a>

<h4>The For Loop:</h4>



<p>

In the example we saw where a while loop was used to print the numbers 1 through 5, a few things happened: Firstly, a variable was initialized with the value 0. Secondly, an expression was evaluated to see if the variable was less than 5. Thirdly, the number was shown and the variable was incremented (1 was added).

</p>



<p>

This same process can be achieved in fewer lines of code with the <em>for loop</em>. A for loop takes on the following form:

</p>



<pre>
for (<em>initialization</em>; <em>expression</em>; <em>increment</em>)
{
	<em>statements</em>
}
</pre>



<p>

The first part of the for loop inside of the parentheses is the <em>initialization</em>: Here you can assign an initial value to a variable. The second part is the <em>expression</em>, which, like the rest of the control structures, can take any valid expression. Lastly is the <em>increment</em> portion: This can also be any valid expression, but generally it is used to increment the variable that was initialized in the first section. <em>statements</em> will be run if the <em>expression</em> is evaluated to 1. Let's see the while loop example again, but this time with a for loop.

</p>

<pre>
for (count = 0; count &lt; 5; count++)
{
	mwin(count);
}
wait();
</pre>



<p>

This code works almost exactly the same way as the while loop example. The only difference that you will notice is that it shows the numbers 0 through 4 instead of 1 through 5!

</p>



<p>

When you are working with code where there is an initialization variable, an expression, and incrementation (or decrementation), it is safe to say that a for loop should suffice over a while loop to create more tightly knit code.

</p>







<a name="con.switch"></a>

<h4>The Switch Statement:</h4>



<p>

When you are dealing with multiple cases of equality comparisons with a long chain of <code>if...elseif</code>, you may opt to use the <em>switch</em> control structure instead. It allows you to compare a given expression against other expressions with <em>cases</em>. This is the form that a switch structure takes on: 

</p>


<pre>
switch (<em>expression</em>)
{
	case <em>expression2</em>:
	{
		<em>statements1</em>
	}
	case <em>expression3</em>:
	{
		<em>statements2</em>
	}
	// <em>etc...</em>
}
</pre>



<p>

Where <em>expression</em>N is compared to <em>expression</em>, and <em>statements</em>N is the statements that are run if that case's value matches the value it's compared to. For example, we can check if the variable <code>x</code> is equal to 1 or 2 with this switch...case structure:

</p>


<pre>
x = 2;
switch (x)
{
	case 1:
	{
		mwin("x is equal to 1!");
	}
	case 2:
	{
		mwin("x is equal to 2!");
	}
}
wait();
</pre>



<p>
We can also emulate an <em>else</em> statement with the <em>default</em> keyword:
</p>

<pre>
x = 42;
switch (x)
{
	case 1:
	{
		mwin("x is equal to 1!");
	}
	case 2:
	{
		mwin("x is equal to 2!");
	}
	default:
	{
		mwin("x is equal to " + x + "!");
	}
}
wait();
</pre>


<p>
In this second example, <code>x</code> is neither 1 or 2, so the first two case statements will fail. Instead, the default case will be run because no others were (and so "x is equal to 42!" will be shown). 
</p>


<hr />

<a name="operators"></a>
<h3>Operators</h3>

<p>
Operators are used to perform operations on data like addition and multiplication. There are operators for arithmetic, logical and relational comparisons, bitwise operations, etc. It should be noted that each operator returns a value (even in the case of assignment operators such as <code>x = (y += 1) + 1</code>), and so each example onward is a valid expression.
</p>



<a name="operators.arithmetic"></a>
<h4>Arithmetic Operators:</h4>

<h5>Addition (+)</h5>
<p>Returns the sum of the left and right operands.</p>
<pre>a + b</pre>

<h5>Addition Assignment (+=)</h5>
<p>Adds the right operand's value to the left's.</p>
<pre>a += b</pre>

<h5>Subtraction (-)</h5>
<p>Returns the difference between the left and right operands.</p>
<pre>a - b</pre>

<h5>Subtraction Assignment (-=)</h5>
<p>Subtracts the right operand's value from the left's.</p>
<pre>a -= b</pre>

<h5>Multiplication (*)</h5>
<p>Returns the left operand multiplied by the right.</p>
<pre>a * b</pre>

<h5>Multiplication Assignment (*=)</h5>
<p>Multiplies the left operand's value by the right's.</p>
<pre>a *= b</pre>

<h5>Division (/)</h5>
<p>Returns the left operand divided by the right.</p>
<pre>a / b</pre>

<h5>Division Assignment (/=)</h5>
<p>Divides the left operand's value by the right's.</p>
<pre>a /= b</pre>

<h5>Power (^)</h5>
<p>Returns the left operand's value to the power of the right's.</p>
<pre>a ^ b</pre>

<h5>Power Assignment (^=)</h5>
<p>Raises the left operand's value to the power of the right.</p>
<pre>a ^= b</pre>

<h5>Modulo (%)</h5>
<p>Returns the remainder of the left operand's value divided by the right's.</p>
<pre>a % b</pre>

<h5>Modulo Assignment (%=)</h5>
<p>Assigns the remainder of a division between the left and right operands to the left operand.</p>
<pre>a %= b</pre>

<h5>Prefix Increment (++)</h5>
<p>Increments its operand's value by 1 and returns the incremented value.</p>
<pre>++a</pre>

<h5>Postfix Increment (++)</h5>
<p>Increments its operand's value by 1 and returns the original value.</p>
<pre>a++</pre>

<h5>Prefix Decrement (--)</h5>
<p>Decrements its operand's value by 1 and returns the decremented value.</p>
<pre>--a</pre>

<h5>Postfix Decrement (--)</h5>
<p>Decrements its operand's value by 1 and returns the original value.</p>
<pre>a--</pre>



<a name="operators.comparison"></a>
<h4>Comparison Operators:</h4>

<h5>Equal To (==)</h5>
<p>Returns 1 if both the left and right operands are equal, otherwise it returns 0.</p>
<pre>a == b</pre>

<h5>Not Equal To (~=)</h5>
<p>Returns 1 if the left and right operands are not equal, otherwise it returns 0.</p>
<pre>a ~= b</pre>

<h5>Greater Than (&gt;)</h5>
<p>Returns 1 if the left operand is greater than the right, otherwise it returns 0.</p>
<pre>a &gt; b</pre>

<h5>Greater Than or Equal To (&gt;=)</h5>
<p>Returns 1 if the left operand is greater than or equal to the right, otherwise it returns 0.</p>
<pre>a &gt;= b</pre>

<h5>Less Than (&lt;)</h5>
<p>Returns 1 if the left operand is less than the right, otherwise it returns 0.</p>
<pre>a &lt; b</pre>

<h5>Less Than or Equal To (&lt;=)</h5>
<p>Returns 1 if the left operand is less than or equal to the right, otherwise it returns 0.</p>
<pre>a &lt;= b</pre>

<h5>Logical AND (&amp;&amp;, AND)</h5>
<p>Returns 1 if both the left and right operands are non-zero, otherwise it returns 0.</p>
<pre>
a &amp;&amp; b
a AND b
</pre>

<h5>Logical OR (||, OR)</h5>
<p>Returns 1 if either the left or right operand is non-zero, otherwise it returns 0.</p>
<pre>
a || b
a OR b
</pre>

<h5>Logical NOT (!)</h5>
<p>Returns 1 if its operand is 0, otherwise it returns 0.</p>
<pre>!a</pre>



<a name="operators.bitwise"></a>
<h4>Bitwise Operators:</h4>

<h5>Bitwise AND (&amp;)</h5>
<p>Compares each bit in the left operand to each corresponding bit in the right operand, returning 1 if the two corresponding bits are 1; otherwise 0.</p>
<pre>a &amp; b</pre>

<h5>Bitwise AND Assignment (&amp;=)</h5>
<p>Compares each bit in the left operand to each corresponding bit in the right operand, returning 1 if the two corresponding bits are 1, 0 otherwise, and assigns the resulting value to the left operand.</p>
<pre>a &amp;= b</pre>

<h5>Bitwise OR (|)</h5>
<p>Compares each bit in the left operand to each corresponding bit in the right operand, returning 1 if either of the corresponding bits are 1; otherwise 0.</p>
<pre>a | b</pre>

<h5>Bitwise OR Assignment (|=)</h5>
<p>Compares each bit in the left operand to each corresponding bit in the right operand, returning 1 if either of the corresponding bits are 1, 0 otherwise, and assigns the resulting value to the left operand.</p>
<pre>a |= b</pre>

<h5>Bitwise NOT (~)</h5>
<p>Performs logical negation of each bit in its operand, changing bits that were 1 to 0 and bits that were 0 to 1.</p>
<pre>~a</pre>



<h5>Bitwise XOR (`)</h5>

<p>Compares each bit in the left operand to each corresponding bit in the right operand, returning 1 if the two bits are not the same; otherwise 0.</p>
<pre>a ` b</pre>

<h5>Bitwise XOR Assignment (`=)</h5>
<p>Compares each bit in the left operand to each corresponding bit in the right operand, returning 1 if the two bits are not the same, 0 otherwise, and assigns the resulting value to the left operand.</p>
<pre>a `= b</pre>



<a name="operators.other"></a>
<h4>Other Operators:</h4>


<h5>Ternary (?:)</h5>
<p>Returns <em>b</em> if <em>a</em> is non-zero, otherwise it returns <em>c</em>.</p>
<pre>a ? b : c</pre>



</div>

<hr />
<p>
<a href="page18.1.htm">previous</a>, <a href="page18.3.htm">forward</a>
</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
