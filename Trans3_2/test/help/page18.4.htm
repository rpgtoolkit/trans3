<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<div id="primer">
<h2><a href="page17.htm">RPGCode</a> &mdash; <a href="page18.htm">Language Features</a> &mdash; Scope</h2>
<h3 style="margin-bottom: 10px;">Contents</h3>
<a href="#scope">Variable scope</a>
<ul style="margin-bottom: 15px">
	<li><a href="#scope.autolocal">Using autolocal</a></li>
	<li><a href="#scope.uses">Other uses</a></li>
</ul>

<hr />

<a name="scope"></a>
<h3>Variable scope</h3>

<p>
In RPGCode, "scope" refers to a context in which your variables exist. For example, all variables declared in a program are considered <em>global</em> by default. When a variable is declared in the <em>global scope</em>, it will exist in memory until it is either unset (via the <code>kill()</code> function) or trans3 is closed. For example, look at this code:
</p>

<pre>
function f()
{
	x = 1;
}

f();
show(x);
wait();
</pre>

<p>
If you run this code in the program editor, you'll see that calling <code>f()</code> assigns 1 to the variable <code>x</code> and it can still be printed outside of the function. This is because it was declared in the global scope. However, if we declare it in the <em>local scope</em>, it will not be accessible outside of <code>f()</code>. In this example, trying to show <code>x</code> will print nothing:
</p>

<pre>
function f()
{
	local(x);
	x = 1;
}

f();
show(x);
wait();
</pre>

<p>
The variable <code>x</code> in the previous example is now local to the function <em>f</em>, so it can't be accessed anywhere else.
</p>



<a name="scope.autolocal"></a>
<h4>Using autolocal</h4>

<p>
You can set which scope is the default for newly created variables with the <em>autoLocal()</em> function. Since variables will default to local when autoLocal is switched on, they will automatically be deleted at the end of a program (or if they are declared in a function, when the function finishes executing). This can help keep your code cleaner and more succinct because you will not need to manually kill variables at the end of a script and you will not have any unnecessary variables hanging around after their use runs out.
</p>

<pre>
// After this line of code, all (new) variables will be created locally.
autolocal(true);

// This variable will be deleted at the end of the program:
someVariable = 32;

// Switch back to global scope.
autolocal(false);

// This variable will only be deleted when the engine is closed
// or it is killed:
anotherVariable = 64;
</pre>



<a name="scope.uses"></a>
<h4>Other uses</h4>

<p>
You can still create global variables when autoLocal is turned on by using <code>global()</code>. It is used in the same way that <code>local()</code> is used.
</p>

<p>
However, <code>local()</code> and <code>global()</code> are not only useful for creating variables in a specific scope: They can also refer to different variables of the same name in different scopes. This next example illustrates using two variables of the same name in different scopes:
</p>

<pre>
function f()
{
	// Create a local variable with a value of 3.
	local(x) = 3;

	// Show the local variable "x".
	show(x);
	
	// Now, fetch the global variable "x".
	show(global(x));
	
	wait();
}

x = 9;
f();
</pre>

<p>
When you run this example, the values 3 and then 9 should be printed to the screen.
</p>


</div>
<hr />
<p>
<a href="page18.3.htm">previous</a>, <a href="page18.5.htm">forward</a>
</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
