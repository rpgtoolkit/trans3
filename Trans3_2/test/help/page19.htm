<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
	<title>RPGToolkit Help &mdash;&nbsp;</title>
	<script type="text/javascript" src="js.js"></script>
	<link rel="stylesheet" href="styles/css.css" />
	<!--[if IE]>
		<style type="text/css">
			@import url("styles/ie.css");
		</style>
		<script type="text/javascript">
			g_bUsingIe = true;
		</script>
	<![endif]-->
</head>

<body>

<div id="document">

<h1><span style="font-size: 19.5pt;">tk3 (<a href="/">home</a>, <a href="/dev">dev</a>, <a href="/source">source</a>, <a href="/bugs">bugs</a>, <a href="/help" style="color: rgb(0, 50, 120);">help</a>)</span></h1>

<div class="topLinks">

<span><a href="index.htm">home</a></span>
|&nbsp;

<span><a href="page1.htm">quick-start</a></span>
|&nbsp;

<span
	onmouseover="showMenu('editor');"
	onmouseout="hideMenu('editor');"
	id="editor_link"
><a href="page2.htm">editor</a></span>
|&nbsp;

<div
	id="editor"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('editor')"
>
	<div><a href="pageed_environment.htm">editor environment</a></div>
	<div><a href="page3.htm">main file editor</a></div>
	<div><a href="page4.htm">board editor</a></div>
	<div><a href="page5.htm">tile editor</a></div>
	<div><a href="page6.htm">program editor</a></div>
	<div><a href="page7.htm">character editor</a></div>

	<div><a href="page8.htm">item editor</a></div>
	<div><a href="page9.htm">enemy editor</a></div>
	<div><a href="page10.htm">animation editor</a></div>
	<div><a href="page11.htm">tile bitmap editor</a></div>
	<div><a href="page12.htm">special move editor</a></div>
	<div><a href="page13.htm">status effect editor</a></div>

	<div style="margin-bottom: 0;"><a href="pageed_background.htm">background editor</a></div>
</div>

<span
	onmouseover="showMenu('engine');"
	onmouseout="hideMenu('engine');"
	id="engine_link"
><a href="page14.htm">playing</a></span>
|&nbsp;
<div
	id="engine"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('engine')"
>
	<div><a href="page15.htm">default systems</a></div>
	<div style="margin-bottom: 0;"><a href="page16.htm">distribution</a></div>
</div>

<span
	onmouseover="showMenu('rpgcode');"
	onmouseout="hideMenu('rpgcode');"
	id="rpgcode_link"
><a href="page17.htm">rpgcode</a></span>
|&nbsp;
<div
	id="rpgcode"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('rpgcode')"
>
	<div id="rpgcode_features_link"><a href="page18.htm">language features</a></div>
	<div><a href="page19.htm">function reference</a></div>
	<div
		style="margin-bottom: 0;"
		id="rpgcode_oop_link"
	><a href="page21.htm">object oriented coding</a></div>

</div>

<span
	onmouseover="showMenu('troubleshooting');"
	onmouseout="hideMenu('troubleshooting');"
	id="troubleshooting_link"
><a href="page22.htm">troubleshooting</a></span>
|&nbsp;
<div
	id="troubleshooting"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('troubleshooting')"
>
	<div><a href="page23.htm">faq</a></div>
	<div><a href="page25.htm">technical issues</a></div>
	<div style="margin-bottom: 0;"><a href="page26.htm">system requirements</a></div>
</div>

<span
	onmouseover="showMenu('about');"
	onmouseout="hideMenu('about');"
	style="margin-bottom: 0;"
	id="about_link"
><a href="page28.htm">about</a></span>
<div
	id="about"
	class="submenu"
	onmouseover="g_currentMenu = null;"
	onmouseout="hideMenu('about')"
>
	<div><a href="page29.htm">history</a></div>
	<div><a href="page30.htm">links</a></div>
	<div style="margin-bottom: 0;"><a href="page31.htm">3.1.0 changelog</a></div>
</div>

</div>
<div id="content">
<h2>RPGCode Function Reference</h2><ul>

<script type="text/javascript">
<!--
	function toggleSection(section, pLink)
	{
		pLink.innerHTML = ((pLink.innerHTML == "+") ? "-" : "+");
		var pSection = document.getElementById(section);
		pSection.style.display = ((pSection.style.display == "none") ? "block" : "none");
	}
	function toggleAll(bOpen)
	{
		if (!document.getElementsByTagName) return;
		var lists = document.getElementsByTagName("ul");
		var listInnerHtml = (bOpen ? "block" : "none");
		for (var i = 0; i < lists.length; i++)
		{
			var list = lists[i];
			if (list.id) list.style.display = listInnerHtml;
		}
		var anchors = document.getElementsByTagName("a");
		var anchorInnerHtml = (bOpen ? "-" : "+");
		for (var i = 0; i < anchors.length; i++)
		{
			var anchor = anchors[i];
			if (anchor.onmousedown) anchor.innerHTML = anchorInnerHtml;
		}
	}
	var g_oldOnLoad = window.onload;
	window.onload = hideSections;
	function hideSections()
	{
		toggleAll(false);
		g_oldOnLoad();
		var str = new String(document.location);
		var i = str.indexOf("#");
		if (i != -1) document.location = str.substring(i, str.length);
	}
// -->
</script>

<p>
[ <a href="javascript: toggleAll(false);">Collapse All</a> | <a href="javascript: toggleAll(true);">Expand All</a> ]
</p>
<pre><ul><li>a [ <a onmousedown="toggleSection('a', this);" href="javascript: void(0);">+</a> ]<ul id="a"><li><a href="#activeplayer">activePlayer</a></li><li><a href="#addplayer">addPlayer</a></li><li><a href="#ai">ai</a></li><li><a href="#animatedtiles">animatedTiles</a></li><li><a href="#applystatus">applyStatus</a></li><li><a href="#apppath">appPath</a></li><li><a href="#asc">asc</a></li><li><a href="#attackall">attackAll</a></li><li><a href="#autocommand">autoCommand</a></li><li><a href="#autolocal">autoLocal</a></li></ul></li><li>b [ <a onmousedown="toggleSection('b', this);" href="javascript: void(0);">+</a> ]<ul id="b"><li><a href="#battlespeed">battleSpeed</a></li><li><a href="#bitmap">bitmap</a></li><li><a href="#boardgetprogram">boardGetProgram</a></li><li><a href="#boardgetprogrampoint">boardGetProgramPoint</a></li><li><a href="#boardgetvector">boardGetVector</a></li><li><a href="#boardgetvectorpoint">boardGetVectorPoint</a></li><li><a href="#boardsetprogram">boardSetProgram</a></li><li><a href="#boardsetprogrampoint">boardSetProgramPoint</a></li><li><a href="#boardsetvector">boardSetVector</a></li><li><a href="#boardsetvectorpoint">boardSetVectorPoint</a></li><li><a href="#bold">bold</a></li><li><a href="#bordercolor">borderColor</a></li><li><a href="#branch">branch</a></li></ul></li><li>c [ <a onmousedown="toggleSection('c', this);" href="javascript: void(0);">+</a> ]<ul id="c"><li><a href="#callplayerswap">callplayerswap</a></li><li><a href="#callshop">callshop</a></li><li><a href="#canvasdrawpart">canvasDrawPart</a></li><li><a href="#canvasgetscreen">canvasGetScreen</a></li><li><a href="#castint">castInt</a></li><li><a href="#castlit">castLit</a></li><li><a href="#castnum">castNum</a></li><li><a href="#change">change</a></li><li><a href="#characterspeed">characterSpeed</a></li><li><a href="#charat">charAt</a></li><li><a href="#chr">chr</a></li><li><a href="#clear">clear</a></li><li><a href="#clearbuffer">clearBuffer</a></li><li><a href="#clearbuttons">clearbuttons</a></li><li><a href="#closefile">closeFile</a></li><li><a href="#color">color</a></li><li><a href="#colorrgb">colorRgb</a></li><li><a href="#cos">cos</a></li><li><a href="#createcanvas">createCanvas</a></li><li><a href="#createcursormap">createCursorMap</a></li><li><a href="#createitem">createItem</a></li><li><a href="#cursormapadd">cursorMapAdd</a></li><li><a href="#cursormaphand">cursorMapHand</a></li><li><a href="#cursormaprun">cursorMapRun</a></li></ul></li><li>d [ <a onmousedown="toggleSection('d', this);" href="javascript: void(0);">+</a> ]<ul id="d"><li><a href="#debug">debug</a></li><li><a href="#debugger">debugger</a></li><li><a href="#delay">delay</a></li><li><a href="#destroyitem">destroyitem</a></li><li><a href="#destroyplayer">destroyPlayer</a></li><li><a href="#dirsav">dirSav</a></li><li><a href="#done">done</a></li><li><a href="#drainall">drainAll</a></li><li><a href="#drawcanvas">drawCanvas</a></li><li><a href="#drawcanvastransparent">drawCanvasTransparent</a></li><li><a href="#drawcircle">drawCircle</a></li><li><a href="#drawenemy">drawEnemy</a></li><li><a href="#drawline">drawLine</a></li><li><a href="#drawrect">drawRect</a></li></ul></li><li>e [ <a onmousedown="toggleSection('e', this);" href="javascript: void(0);">+</a> ]<ul id="e"><li><a href="#earthquake">earthquake</a></li><li><a href="#empty">empty</a></li><li><a href="#end">end</a></li><li><a href="#endanimation">endAnimation</a></li><li><a href="#equip">equip</a></li><li><a href="#eraseitem">eraseitem</a></li><li><a href="#eraseplayer">eraseplayer</a></li></ul></li><li>f [ <a onmousedown="toggleSection('f', this);" href="javascript: void(0);">+</a> ]<ul id="f"><li><a href="#fade">fade</a></li><li><a href="#fight">fight</a></li><li><a href="#fightenemy">fightEnemy</a></li><li><a href="#fightmenugraphic">fightMenuGraphic</a></li><li><a href="#fightstyle">fightStyle</a></li><li><a href="#fileeof">fileEof</a></li><li><a href="#fileget">fileGet</a></li><li><a href="#fileinput">fileInput</a></li><li><a href="#fileprint">filePrint</a></li><li><a href="#fileput">filePut</a></li><li><a href="#fillcircle">fillCircle</a></li><li><a href="#fillrect">fillRect</a></li><li><a href="#font">font</a></li><li><a href="#fontsize">fontSize</a></li><li><a href="#forceredraw">forceRedraw</a></li></ul></li><li>g [ <a onmousedown="toggleSection('g', this);" href="javascript: void(0);">+</a> ]<ul id="g"><li><a href="#gamespeed">gamespeed</a></li><li><a href="#get">get</a></li><li><a href="#getboardname">getBoardName</a></li><li><a href="#getboardtile">getBoardTile</a></li><li><a href="#getboardtiletype">getBoardTileType</a></li><li><a href="#getcolor">getColor</a></li><li><a href="#getcorner">getCorner</a></li><li><a href="#getdp">getDp</a></li><li><a href="#getfontsize">getFontSize</a></li><li><a href="#getfp">getFp</a></li><li><a href="#getgp">getGp</a></li><li><a href="#gethp">getHp</a></li><li><a href="#getitemcost">getItemCost</a></li><li><a href="#getitemdesc">getItemDesc</a></li><li><a href="#getitemname">getItemName</a></li><li><a href="#getitemsellprice">getItemSellPrice</a></li><li><a href="#getlevel">getLevel</a></li><li><a href="#getmaxhp">getMaxHp</a></li><li><a href="#getmaxsmp">getMaxSmp</a></li><li><a href="#getpixel">getPixel</a></li><li><a href="#getres">getRes</a></li><li><a href="#getsmp">getSmp</a></li><li><a href="#gettextheight">gettextheight</a></li><li><a href="#gettextwidth">gettextwidth</a></li><li><a href="#getthreadid">getThreadId</a></li><li><a href="#gettickcount">getTickCount</a></li><li><a href="#giveexp">giveExp</a></li><li><a href="#givegp">giveGp</a></li><li><a href="#givehp">giveHp</a></li><li><a href="#giveitem">giveItem</a></li><li><a href="#givesmp">giveSmp</a></li><li><a href="#godos">goDos</a></li><li><a href="#gone">gone</a></li></ul></li><li>h [ <a onmousedown="toggleSection('h', this);" href="javascript: void(0);">+</a> ]<ul id="h"><li><a href="#hp">hp</a></li></ul></li><li>i [ <a onmousedown="toggleSection('i', this);" href="javascript: void(0);">+</a> ]<ul id="i"><li><a href="#iif">iif</a></li><li><a href="#inn">inn</a></li><li><a href="#instr">inStr</a></li><li><a href="#internalmenu">internalMenu</a></li><li><a href="#italics">italics</a></li><li><a href="#itemcount">itemCount</a></li><li><a href="#itemdirection">itemDirection</a></li><li><a href="#itemgetpath">itemGetPath</a></li><li><a href="#itemlocation">itemlocation</a></li><li><a href="#itempath">itemPath</a></li><li><a href="#itemspeed">itemspeed</a></li><li><a href="#itemstance">itemstance</a></li><li><a href="#itemstep">itemstep</a></li><li><a href="#itemwalkspeed">itemWalkSpeed</a></li></ul></li><li>k [ <a onmousedown="toggleSection('k', this);" href="javascript: void(0);">+</a> ]<ul id="k"><li><a href="#kill">kill</a></li><li><a href="#killcanvas">killCanvas</a></li><li><a href="#killcursormap">killCursorMap</a></li><li><a href="#killthread">killThread</a></li></ul></li><li>l [ <a onmousedown="toggleSection('l', this);" href="javascript: void(0);">+</a> ]<ul id="l"><li><a href="#layerput">layerput</a></li><li><a href="#lcase">lcase</a></li><li><a href="#left">left</a></li><li><a href="#len">len</a></li><li><a href="#load">load</a></li><li><a href="#log">log</a></li></ul></li><li>m [ <a onmousedown="toggleSection('m', this);" href="javascript: void(0);">+</a> ]<ul id="m"><li><a href="#mainfile">mainFile</a></li><li><a href="#maxhp">maxHp</a></li><li><a href="#maxsmp">maxSmp</a></li><li><a href="#mediaplay">mediaPlay</a></li><li><a href="#mediastop">mediaStop</a></li><li><a href="#mem">mem</a></li><li><a href="#menugraphic">menuGraphic</a></li><li><a href="#mid">mid</a></li><li><a href="#mouseclick">mouseclick</a></li><li><a href="#mousecursor">mouseCursor</a></li><li><a href="#mousemove">mousemove</a></li><li><a href="#move">move</a></li><li><a href="#mp3pause">mp3pause</a></li><li><a href="#msgbox">msgBox</a></li><li><a href="#multirun">multirun</a></li><li><a href="#mwin">mwin</a></li><li><a href="#mwincls">mwinCls</a></li><li><a href="#mwinsize">mwinsize</a></li></ul></li><li>n [ <a onmousedown="toggleSection('n', this);" href="javascript: void(0);">+</a> ]<ul id="n"><li><a href="#newplayer">newPlayer</a></li></ul></li><li>o [ <a onmousedown="toggleSection('o', this);" href="javascript: void(0);">+</a> ]<ul id="o"><li><a href="#onboard">onBoard</a></li><li><a href="#openfileappend">openFileAppend</a></li><li><a href="#openfilebinary">openFileBinary</a></li><li><a href="#openfileinput">openFileInput</a></li><li><a href="#openfileoutput">openFileOutput</a></li><li><a href="#over">over</a></li></ul></li><li>p [ <a onmousedown="toggleSection('p', this);" href="javascript: void(0);">+</a> ]<ul id="p"><li><a href="#parallax">parallax</a></li><li><a href="#pixelmovement">pixelMovement</a></li><li><a href="#pixeltext">pixelText</a></li><li><a href="#playavi">playAvi</a></li><li><a href="#playavismall">playAviSmall</a></li><li><a href="#playerdirection">playerDirection</a></li><li><a href="#playergetpath">playerGetPath</a></li><li><a href="#playerlocation">playerlocation</a></li><li><a href="#playerpath">playerPath</a></li><li><a href="#playerspeed">playerspeed</a></li><li><a href="#playerstance">playerstance</a></li><li><a href="#playerstep">playerstep</a></li><li><a href="#posture">posture</a></li><li><a href="#prg">prg</a></li><li><a href="#print">print</a></li><li><a href="#prompt">prompt</a></li><li><a href="#push">push</a></li><li><a href="#pushitem">pushItem</a></li><li><a href="#put">put</a></li><li><a href="#putitem">putitem</a></li><li><a href="#putplayer">putplayer</a></li></ul></li><li>r [ <a onmousedown="toggleSection('r', this);" href="javascript: void(0);">+</a> ]<ul id="r"><li><a href="#random">random</a></li><li><a href="#regexpreplace">regExpReplace</a></li><li><a href="#remove">remove</a></li><li><a href="#removeplayer">removePlayer</a></li><li><a href="#removestatus">removeStatus</a></li><li><a href="#rendernow">rendernow</a></li><li><a href="#replace">replace</a></li><li><a href="#reset">reset</a></li><li><a href="#restoreplayer">restorePlayer</a></li><li><a href="#restorescreen">restorescreen</a></li><li><a href="#restorescreenarray">restorescreenarray</a></li><li><a href="#resumenext">resumeNext</a></li><li><a href="#right">right</a></li><li><a href="#rpgcode">rpgCode</a></li><li><a href="#run">run</a></li></ul></li><li>s [ <a onmousedown="toggleSection('s', this);" href="javascript: void(0);">+</a> ]<ul id="s"><li><a href="#save">save</a></li><li><a href="#savescreen">savescreen</a></li><li><a href="#scan">scan</a></li><li><a href="#send">send</a></li><li><a href="#setambientlevel">setAmbientLevel</a></li><li><a href="#setbutton">setbutton</a></li><li><a href="#setconstants">setconstants</a></li><li><a href="#seterrorhandler">setErrorHandler</a></li><li><a href="#setimage">setImage</a></li><li><a href="#setimageadditive">setImageAdditive</a></li><li><a href="#setimagetranslucent">setImageTranslucent</a></li><li><a href="#setimagetransparent">setImageTransparent</a></li><li><a href="#setmwintranslucency">setMwinTranslucency</a></li><li><a href="#setpixel">setPixel</a></li><li><a href="#setresumenexthandler">setResumeNextHandler</a></li><li><a href="#setvolume">setvolume</a></li><li><a href="#shopcolors">shopcolors</a></li><li><a href="#sin">sin</a></li><li><a href="#smartstep">smartStep</a></li><li><a href="#smp">smp</a></li><li><a href="#sound">sound</a></li><li><a href="#sourcehandle">sourcehandle</a></li><li><a href="#sourcelocation">sourcelocation</a></li><li><a href="#splicevariables">spliceVariables</a></li><li><a href="#split">split</a></li><li><a href="#spritetranslucency">spriteTranslucency</a></li><li><a href="#sqrt">sqrt</a></li><li><a href="#stance">stance</a></li><li><a href="#start">start</a></li><li><a href="#statictext">staticText</a></li></ul></li><li>t [ <a onmousedown="toggleSection('t', this);" href="javascript: void(0);">+</a> ]<ul id="t"><li><a href="#takegp">takeGp</a></li><li><a href="#takeitem">takeItem</a></li><li><a href="#tan">tan</a></li><li><a href="#targethandle">targethandle</a></li><li><a href="#targetlocation">targetlocation</a></li><li><a href="#tellthread">tellThread</a></li><li><a href="#text">text</a></li><li><a href="#textspeed">textSpeed</a></li><li><a href="#thread">thread</a></li><li><a href="#threadsleep">threadSleep</a></li><li><a href="#threadsleepremaining">threadSleepRemaining</a></li><li><a href="#threadwake">threadWake</a></li><li><a href="#tiletype">tileType</a></li><li><a href="#trim">trim</a></li></ul></li><li>u [ <a onmousedown="toggleSection('u', this);" href="javascript: void(0);">+</a> ]<ul id="u"><li><a href="#ucase">ucase</a></li><li><a href="#underarrow">underArrow</a></li><li><a href="#underline">underline</a></li></ul></li><li>v [ <a onmousedown="toggleSection('v', this);" href="javascript: void(0);">+</a> ]<ul id="v"><li><a href="#viewbrd">viewbrd</a></li></ul></li><li>w [ <a onmousedown="toggleSection('w', this);" href="javascript: void(0);">+</a> ]<ul id="w"><li><a href="#wait">wait</a></li><li><a href="#walkspeed">walkSpeed</a></li><li><a href="#wander">wander</a></li><li><a href="#wav">wav</a></li><li><a href="#wavstop">wavstop</a></li><li><a href="#win">win</a></li><li><a href="#wincolor">winColor</a></li><li><a href="#wincolorrgb">winColorRgb</a></li><li><a href="#windows">windows</a></li><li><a href="#wingraphic">winGraphic</a></li><li><a href="#wipe">wipe</a></li></ul></li><li>z [ <a onmousedown="toggleSection('z', this);" href="javascript: void(0);">+</a> ]<ul id="z"><li><a href="#zoom">zoom</a></li></ul></li></ul></pre><hr /><h3>Variable types</h3><ul><li><a id="array"></a><b>array</b> &mdash; Array: a collection of variables using the same identifer [<a href="page18.1.htm#variables.array">link</a>] <pre>array[0] = "first entry";
array[1] = "second entry";

split("split,by,commas",",",array);
show(array[0]); // Shows "split"</pre></li><li><a id="bool"></a><b>bool</b> &mdash; Boolean: true or false<pre>bVar = true; // Note: no quotes</pre></li><li><a id="canvas"></a><b>canvas</b> &mdash; Canvas: the handle (pointer) to an off-screen bitmap. Must be generated with createCanvas() and freed using killCanvas()<pre>cnv = createCanvas(640, 480);
bitmap("image.jpg", cnv);
drawCanvas(cnv, 0, 0);
killCanvas(cnv);</pre></li><li><a id="cursor_map"></a><b>cursor_map</b> &mdash; Cursor map: handle (pointer) to a cursor map object as created by createCursorMap() and destroyed using killCursorMap(). A cursor map consists of points on the screen at between which the cursor can be moved using the arrow keys<pre>cmap = createCursorMap();
cursorMapAdd(320, 240, cmap);
res = cursorMapRun(cmap);
killCursorMap(cmap);</pre></li><li><a id="double"></a><b>double</b> &mdash; Double: alias of int (floating point)<pre></pre></li><li><a id="handle"></a><b>handle</b> &mdash; Handle: sprite or object handle (identifier). Possible values vary depending on context<pre>// Item handles may be numerical (their index in the board item array) or, *in their multitasking program*, "source" or "target".
itemDirection(3, tkDIR_W);
itemPath("source", 0, 123, 456);

// Player handles may be literal or numerical or "source" or "target" (in multitasking program).
playerStance("bob", "attack");</pre></li><li><a id="int"></a><b>int</b> &mdash; Numerical: integer or floatin point [<a href="page18.1.htm#variables.num">link</a>] <pre>iVar = 12;
iVar = 3.14;</pre></li><li><a id="label"></a><b>label</b> &mdash; Label: a program line identifier. Used in conjunction with branch() to cause program execution to jump unconditionally to the point indicated by the label. Used in error handling in conjunction with setErrorHandler to execute code when an error occurs [<a href="page18.5.htm">link</a>] <pre>mwin("Line one");
branch(":skip");
mwin("Line two");
:skip
mwin("Line three");

// Prints:
// Line one
// Line three</pre></li><li><a id="string"></a><b>string</b> &mdash; Literal: any character (must be quoted) [<a href="page18.1.htm#variables.str">link</a>] <pre>sVar = "RpgTK3.1.0";</pre></li><li><a id="thread"></a><b>thread</b> &mdash; Thread: a handle (pointer) to a thread, created with thread() and destroyed with killThread()<pre>tid = thread("thread.prg", 0);
killThread(tid);</pre></li><li><a id="variant"></a><b>variant</b> &mdash; Variant: may be numerical or literal (see handle)<pre></pre></li><li><a id="void"></a><b>void</b> &mdash; Void: the function does not return a value [<a href="page18.1.htm#functionsii.ret">link</a>] <pre></pre></li></ul><hr /><a id="activeplayer"></a><h3>activePlayer</h3><pre><a href="#void">void</a> activePlayer(<a href="#variant">variant</a> handle)</pre><pre><a href="#handle">handle</a> activePlayer(void)</pre><p>Set or get the active player, by handle. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="addplayer"></a><h3>addPlayer</h3><pre><a href="#void">void</a> addPlayer(<a href="#string">string</a> file)</pre><p>Add a player to the party. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="ai"></a><h3>ai</h3><pre><a href="#void">void</a> ai(<a href="#int">int</a> level)</pre><p>Have the source enemy use the internal AI. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="animatedtiles"></a><h3>animatedTiles</h3><pre><a href="#void">void</a> animatedTiles()</pre><p>Toggle animated tiles. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="applystatus"></a><h3>applyStatus</h3><pre><a href="#void">void</a> applyStatus(<a href="#string">string</a> target, <a href="#string">string</a> file)</pre><p>Apply a status effect to a fighter. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="apppath"></a><h3>appPath</h3><pre><a href="#string">string</a> appPath([<a href="#string">string</a> &dest])</pre><p>Retrieve the path of trans3.exe, without the final backslash. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="asc"></a><h3>asc</h3><pre><a href="#int">int</a> asc(<a href="#string">string</a> chr[, <a href="#int">int</a> &ret])</pre><p>Get the ASCII value of a character. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="attackall"></a><h3>attackAll</h3><pre><a href="#void">void</a> attackAll(<a href="#int">int</a> fp)</pre><p>Deal the specified amount in HP to all the members of the target's party. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="autocommand"></a><h3>autoCommand</h3><pre><a href="#void">void</a> autoCommand()</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="autolocal"></a><h3>autoLocal</h3><pre><a href="#void">void</a> autoLocal(<a href="#bool">bool</a> bEnabled)</pre><p>Set the default scope for variable resolution. When autolocal() is not enabled, variables are assumed to be global unless a local variable has been defined. When autolocal() is enabled, variabes are assumed to be local unless a global variable has been defined. </p><p>Note that if autolocal() is enabled and variables that are not global are referenced outside of any function, these variables are local to the program. When the program ends, they will be deleted. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="battlespeed"></a><h3>battleSpeed</h3><pre><a href="#void">void</a> battleSpeed(<a href="#int">int</a> speed)</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="bitmap"></a><h3>bitmap</h3><pre><a href="#void">void</a> bitmap(<a href="#string">string</a> file, [<a href="#canvas">canvas</a> cnv])</pre><p>Fill a surface with an image. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardgetprogram"></a><h3>boardGetProgram</h3><pre><a href="#void">void</a> boardGetProgram(<a href="#int">int</a> programIndex, <a href="#string">string</a> &program, <a href="#int">int</a> &pointCount, <a href="#int">int</a> &layer, <a href="#bool">bool</a> &isClosed, <a href="#int">int</a> &attributes, <a href="#int">int</a> &distanceRepeat)</pre><pre><a href="#int">int</a> boardGetProgram()</pre><p><ol><li>Returns the properties of a given program.</li> <li>Returns the number of programs on the board.</li></ol> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardgetprogrampoint"></a><h3>boardGetProgramPoint</h3><pre><a href="#void">void</a> boardGetProgramPoint(<a href="#int">int</a> programIndex, <a href="#int">int</a> pointIndex, <a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p>Get a single point on a board program. x, y are always pixel values. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardgetvector"></a><h3>boardGetVector</h3><pre><a href="#int">int</a> boardGetVector()</pre><pre><a href="#void">void</a> boardGetVector(<a href="#variant">variant</a> vector, <a href="#int">int</a> &type, <a href="#int">int</a> &pointCount, <a href="#int">int</a> &layer, <a href="#bool">bool</a> &isClosed, <a href="#int">int</a> &attributes)</pre><p><ol><li>Returns the number of vectors on the board.</li> <li>Returns the properties of a given vector.</li></ol> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardgetvectorpoint"></a><h3>boardGetVectorPoint</h3><pre><a href="#void">void</a> boardGetVectorPoint(<a href="#variant">variant</a> vector, <a href="#int">int</a> pointIndex, <a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p>Get a single point on a board vector. x, y are always pixel values. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardsetprogram"></a><h3>boardSetProgram</h3><pre><a href="#void">void</a> boardSetProgram(<a href="#int">int</a> programIndex, <a href="#string">string</a> program, <a href="#int">int</a> pointCount, <a href="#int">int</a> layer, <a href="#bool">bool</a> isClosed, <a href="#int">int</a> attributes, <a href="#int">int</a> distanceRepeat)</pre><p>Sets the properties of a given program; creates a new program if one-past-the-end index is given. Use val = boardGetProgram() to get the next index. distanceRepeat in pixels always. </p><p>Possible flags: tkPRG_STEP, tkPRG_KEYPRESS, tkPRG_REPEAT, tkPRG_STOPS_MOVEMENT. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardsetprogrampoint"></a><h3>boardSetProgramPoint</h3><pre><a href="#void">void</a> boardSetProgramPoint(<a href="#int">int</a> programIndex, <a href="#int">int</a> pointIndex, <a href="#int">int</a> x, <a href="#int">int</a> y)</pre><p>Set/move a single point on a board program. x, y are always pixel values. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardsetvector"></a><h3>boardSetVector</h3><pre><a href="#void">void</a> boardSetVector(<a href="#variant">variant</a> vector, <a href="#int">int</a> type, <a href="#int">int</a> pointCount, <a href="#int">int</a> layer, <a href="#bool">bool</a> isClosed, <a href="#int">int</a> attributes)</pre><p>Sets the properties of a given vector. Creates a new vector if an existing one is not found - if a numeric variable is supplied, it will be set to the new index (one-past-end). </p><p><ul><li>Possible types are:  tkVT_SOLID, tkVT_UNDER, tkVT_STAIRS, tkVT_WAYPOINT.</li> <li>Possible attributes: tkVT_BKGIMAGE, tkVT_ALL_LAYERS_BELOW, tkVT_FRAME_INTERSECT.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="boardsetvectorpoint"></a><h3>boardSetVectorPoint</h3><pre><a href="#void">void</a> boardSetVectorPoint(<a href="#variant">variant</a> vector, <a href="#int">int</a> pointIndex, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#bool">bool</a> apply)</pre><p>Set/move a single point on a board vector. x, y are always pixel values. Set apply = true for last change, to improve speed. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="bold"></a><h3>bold</h3><pre><a href="#void">void</a> bold(<a href="#bool">bool</a> enable)</pre><p>Toggle emboldening of text. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="bordercolor"></a><h3>borderColor</h3><pre><a href="#void">void</a> borderColor(<a href="#int">int</a> r, <a href="#int">int</a> g, <a href="#int">int</a> b)</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="branch"></a><h3>branch</h3><pre><a href="#void">void</a> branch(<a href="#label">label</a> lbl)</pre><p>Jump to a label. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="callplayerswap"></a><h3>callplayerswap</h3><pre><a href="#void">void</a> callplayerswap(...)</pre><p>Unimplemented in 3.1.0. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="callshop"></a><h3>callshop</h3><pre><a href="#void">void</a> callshop(<a href="#string">string</a> item1, <a href="#string">string</a> item2, <a href="#string">string</a> item3, ...)</pre><p>Displays a basic shop interface that allows the buying of the items given as parameters and the selling of items in the player's inventory. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="canvasdrawpart"></a><h3>canvasDrawPart</h3><pre><a href="#void">void</a> canvasDrawPart(<a href="#int">int</a> cnv, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> xSrc, <a href="#int">int</a> ySrc, <a href="#int">int</a> width, <a href="#int">int</a> height[, <a href="#canvas">canvas</a> cnvDest])</pre><p>Draw part of a canvas. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="canvasgetscreen"></a><h3>canvasGetScreen</h3><pre><a href="#void">void</a> canvasGetScreen(<a href="#canvas">canvas</a> cnvDest)</pre><p>Copy the screen onto a canvas. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="castint"></a><h3>castInt</h3><pre><a href="#int">int</a> castInt(<a href="#variant">variant</a> x, [<a href="#int">int</a> &ret])</pre><p>Cast the specified value to an integer (i.e., a number in the sequence ...-2, -1, 0, 1, 2...). This is useful for removing fractional parts of numbers. Note that this function does not round. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="castlit"></a><h3>castLit</h3><pre><a href="#string">string</a> castLit(<a href="#variant">variant</a> x, [<a href="#string">string</a> &ret])</pre><p>Cast the specified value to a string. There is really no need to do this ever. RPGCode by itself will cast values passed to functions to the correct types as required. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="castnum"></a><h3>castNum</h3><pre><a href="#double">double</a> castNum(<a href="#variant">variant</a> x, [<a href="#double">double</a> &ret])</pre><p>Cast the specified value to a number (double). There is really no need to do this ever. RPGCode by itself will cast values passed to functions to the correct types as required. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="change"></a><h3>change</h3><pre><a href="#void">void</a> change(<a href="#string">string</a> program)</pre><p>Change this program so that next time it is triggered, a different program runs instead. Change() is active only while the player remains on the board (i.e., leaving the board causes programs to return to normal). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="characterspeed"></a><h3>characterSpeed</h3><pre><a href="#void">void</a> characterSpeed()</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="charat"></a><h3>charAt</h3><pre><a href="#string">string</a> charAt(<a href="#string">string</a> str, <a href="#int">int</a> pos, [<a href="#string">string</a> &ret])</pre><p>Get a character from a string. The first character is one. The value of the <b>pos</b> parameter must be in the closed interval [1, length]. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="chr"></a><h3>chr</h3><pre><a href="#string">string</a> chr(<a href="#int">int</a> asc, [<a href="#string">string</a> &ret])</pre><p>Get the character represented by the ASCII code passed in. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="clear"></a><h3>clear</h3><pre><a href="#void">void</a> clear([<a href="#canvas">canvas</a> cnv])</pre><p>Clear a surface. clear() blanks the screen. clear(cnv) blanks the canvas whose handle is 'cnv'. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="clearbuffer"></a><h3>clearBuffer</h3><pre><a href="#void">void</a> clearBuffer()</pre><p>Clear the keyboard buffer. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="clearbuttons"></a><h3>clearbuttons</h3><pre><a href="#void">void</a> clearbuttons([<a href="#int">int</a> slot1, <a href="#int">int</a> slot2...])</pre><p>Clear buttons set by SetButton(). Clear specific slot(s) if supplied, else clear all slots. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="closefile"></a><h3>closeFile</h3><pre><a href="#void">void</a> closeFile(<a href="#string">string</a> file)</pre><p>Close a file. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="color"></a><h3>color</h3><pre><a href="#void">void</a> color(<a href="#int">int</a> dos)</pre><p>Change to a DOS colour. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="colorrgb"></a><h3>colorRgb</h3><pre><a href="#void">void</a> colorRgb(<a href="#int">int</a> r, <a href="#int">int</a> g, <a href="#int">int</a> b)</pre><p>Change the active colour to an RGB value. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="cos"></a><h3>cos</h3><pre><a href="#double">double</a> cos(<a href="#double">double</a> x, [<a href="#double">double</a> &ret])</pre><p>Calculate cosine x. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="createcanvas"></a><h3>createCanvas</h3><pre><a href="#canvas">canvas</a> createCanvas(<a href="#int">int</a> width, <a href="#int">int</a> height, [<a href="#canvas">canvas</a> &cnv])</pre><p>Create a canvas. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="createcursormap"></a><h3>createCursorMap</h3><pre><a href="#cursor_map">cursor_map</a> createCursorMap([<a href="#cursor_map">cursor_map</a> &ret])</pre><p>Create a cursor map. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="createitem"></a><h3>createItem</h3><pre><a href="#int">int</a> createItem(<a href="#string">string</a> filename[, <a href="#int">int</a> &pos])</pre><p>Load an item and return the slot into which it was loaded. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="cursormapadd"></a><h3>cursorMapAdd</h3><pre><a href="#void">void</a> cursorMapAdd(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#cursor_map">cursor_map</a> map)</pre><p>Add a point to a cursor map. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="cursormaphand"></a><h3>cursorMapHand</h3><pre><a href="#void">void</a> cursorMapHand(<a href="#string">string</a> cursor[, <a href="#bool">bool</a> stretch = true])</pre><p>Change the cursor used everywhere cursors are used (e.g. cursor maps, the menu, the battle system), optionally not stretching it to 32 by 32 pixels. </p><p>The string "default" restores the default image. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="cursormaprun"></a><h3>cursorMapRun</h3><pre><a href="#int">int</a> cursorMapRun(<a href="#cursor_map">cursor_map</a> map, [<a href="#int">int</a> &ret])</pre><p>Run a cursor map. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="debug"></a><h3>debug</h3><pre><a href="#void">void</a> debug(<a href="#bool">bool</a> enable)</pre><p>Toggle whether to show debug messages. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="debugger"></a><h3>debugger</h3><pre><a href="#void">void</a> debugger(<a href="#string">string</a> message)</pre><p>Show a debug message. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="delay"></a><h3>delay</h3><pre><a href="#void">void</a> delay(<a href="#double">double</a> time)</pre><p>Delay for a certain number of seconds. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="destroyitem"></a><h3>destroyitem</h3><pre><a href="#void">void</a> destroyitem(<a href="#variant">variant</a> handle)</pre><p>Remove an item from memory. Warning: do not destroy an item through it's own multitasking thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="destroyplayer"></a><h3>destroyPlayer</h3><pre><a href="#void">void</a> destroyPlayer(<a href="#string">string</a> handle)</pre><p>Permanently remove a player from the party. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="dirsav"></a><h3>dirSav</h3><pre><a href="#string">string</a> dirSav(<a href="#string">string</a> title, <a href="#bool">bool</a> allowNewFile, <a href="#int">int</a> textColor, <a href="#int">int</a> backColor, <a href="#string">string</a> image)</pre><p>Allow the user to choose a *.sav file from the "Saved" directory. For historical reasons, returns "CANCEL" if no file is chosen, not "". </p><p>[ <a href="#">top</a> ]</p><hr /><a id="done"></a><h3>done</h3><pre><a href="#void">void</a> done()</pre><p>End the program. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="drainall"></a><h3>drainAll</h3><pre><a href="#void">void</a> drainAll(<a href="#int">int</a> fp)</pre><p>Deal the specified amount in SMP to all the members of the target's party. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="drawcanvas"></a><h3>drawCanvas</h3><pre><a href="#void">void</a> drawCanvas(<a href="#canvas">canvas</a> cnv, <a href="#int">int</a> x, <a href="#int">int</a> y, [<a href="#int">int</a> width, <a href="#int">int</a> height, [<a href="#canvas">canvas</a> dest]])</pre><p>Blit a canvas forward. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="drawcanvastransparent"></a><h3>drawCanvasTransparent</h3><pre><a href="#void">void</a> drawCanvasTransparent(<a href="#canvas">canvas</a> cnv, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> r, <a href="#int">int</a> g, <a href="#int">int</a> b[, <a href="#int">int</a> width, <a href="#int">int</a> height[, <a href="#canvas">canvas</a> dest]])</pre><p>Blit a canvas forward, but don't blit one colour (the transparent colour). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="drawcircle"></a><h3>drawCircle</h3><pre><a href="#void">void</a> DrawCircle(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> radius [, <a href="#int">int</a> canvas])</pre><p>Draw a circle at x,y, optionally to a canvas. Previously an arc could be defined but this never worked, so the two parameters have been cut and the optional canvas is now the fourth parameter. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="drawenemy"></a><h3>drawEnemy</h3><pre><a href="#void">void</a> drawEnemy(<a href="#string">string</a> file, <a href="#int">int</a> x, <a href="#int">int</a> y, [<a href="#canvas">canvas</a> cnv])</pre><p>Draw an enemy. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="drawline"></a><h3>drawLine</h3><pre><a href="#void">void</a> drawLine(<a href="#int">int</a> x1, <a href="#int">int</a> y1, <a href="#int">int</a> x2, <a href="#int">int</a> y2, [<a href="#canvas">canvas</a> cnv])</pre><p>Draw a line. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="drawrect"></a><h3>drawRect</h3><pre><a href="#void">void</a> drawRect(<a href="#int">int</a> x1, <a href="#int">int</a> y1, <a href="#int">int</a> x2, <a href="#int">int</a> y2, [<a href="#canvas">canvas</a> cnv])</pre><p>Draw a rectangle. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="earthquake"></a><h3>earthquake</h3><pre><a href="#void">void</a> earthquake(<a href="#int">int</a> intensity)</pre><p>Shake the screen. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="empty"></a><h3>empty</h3><pre><a href="#void">void</a> empty()</pre><p>Clear all globals. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="end"></a><h3>end</h3><pre><a href="#void">void</a> end()</pre><p>End the program. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="endanimation"></a><h3>endAnimation</h3><pre><a href="#void">void</a> endAnimation(<a href="#int">int</a> animationID)</pre><p>End a multitasking animation. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="equip"></a><h3>equip</h3><pre><a href="#void">void</a> equip(<a href="#variant">variant</a> handle, <a href="#int">int</a> location, <a href="#string">string</a> item)</pre><p>Equip an item from the inventory (by handle or filename) to a location on the player's body. </p><p><ul><li>1 - Head</li> <li>2 - Neck accessory</li> <li>3 - Right hand</li> <li>4 - Left hand</li> <li>5 - Body</li> <li>6 - Legs</li> <li>7+ - Custom accessories</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="eraseitem"></a><h3>eraseitem</h3><pre><a href="#void">void</a> eraseitem(<a href="#variant">variant</a> handle)</pre><p>Erase an item from the screen, but keep it in memory. Warning: erasing an item in it's own multitasking thread will pause the thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="eraseplayer"></a><h3>eraseplayer</h3><pre><a href="#void">void</a> eraseplayer(<a href="#string">string</a> handle)</pre><p>Erase a party player from the screen. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fade"></a><h3>fade</h3><pre><a href="#void">void</a> fade(<a href="#int">int</a> type)</pre><p>Perform a fade using the current colour. There are several different types of fades. </p><p><ul><li>0 - the screen is blotted out by a growing and shrinking box</li> <li>2 - fades from white to black</li> <li>3 - line sweeps across the screen</li> <li>4 - black circle swallows the player</li> <li>5 - image fade to black</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fight"></a><h3>fight</h3><pre><a href="#void">void</a> fight(<a href="#int">int</a> skill, <a href="#string">string</a> background)</pre><p>Start a skill level fight. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fightenemy"></a><h3>fightEnemy</h3><pre><a href="#void">void</a> fightEnemy(<a href="#string">string</a> enemy, <a href="#string">string</a> enemy, ... <a href="#string">string</a> background)</pre><p>Start a fight. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fightmenugraphic"></a><h3>fightMenuGraphic</h3><pre><a href="#void">void</a> fightMenuGraphic(<a href="#string">string</a> image)</pre><p>Choose an image for the fight menu graphic. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fightstyle"></a><h3>fightStyle</h3><pre><a href="#void">void</a> fightStyle()</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fileeof"></a><h3>fileEof</h3><pre><a href="#bool">bool</a> fileEof(<a href="#string">string</a> file, [<a href="#bool">bool</a> &ret])</pre><p>Check whether the end of a file has been reached. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fileget"></a><h3>fileGet</h3><pre><a href="#string">string</a> fileGet(<a href="#string">string</a> file, [<a href="#string">string</a> &ret])</pre><p>Get a byte from a file. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fileinput"></a><h3>fileInput</h3><pre><a href="#string">string</a> fileInput(<a href="#string">string</a> file, [<a href="#string">string</a> &ret])</pre><p>Read a line from a line. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fileprint"></a><h3>filePrint</h3><pre><a href="#void">void</a> filePrint(<a href="#string">string</a> file, <a href="#string">string</a> line)</pre><p>Write a line to a file. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fileput"></a><h3>filePut</h3><pre><a href="#void">void</a> filePut(<a href="#string">string</a> file, <a href="#string">string</a> byte)</pre><p>Write a byte to a file. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fillcircle"></a><h3>fillCircle</h3><pre><a href="#void">void</a> FillCircle(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> radius [, <a href="#int">int</a> canvas])</pre><p>Draw a filled circle at x, y, to screen or canvas. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fillrect"></a><h3>fillRect</h3><pre><a href="#void">void</a> fillRect(<a href="#int">int</a> x1, <a href="#int">int</a> y1, <a href="#int">int</a> x2, <a href="#int">int</a> y2, [<a href="#canvas">canvas</a> cnv])</pre><p>Draw a filled rectangle. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="font"></a><h3>font</h3><pre><a href="#void">void</a> font(<a href="#string">string</a> font)</pre><p>Load a true type font. TK2 fonts are not supported. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="fontsize"></a><h3>fontSize</h3><pre><a href="#void">void</a> fontSize(<a href="#int">int</a> size)</pre><p>Set the font size. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="forceredraw"></a><h3>forceRedraw</h3><pre><a href="#void">void</a> forceRedraw()</pre><p>Force a redrawing of the screen. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="gamespeed"></a><h3>gamespeed</h3><pre><a href="#void">void</a> gamespeed(<a href="#int">int</a> speed)</pre><p>Set the overall walking speed. Changes the walking speed proportionally. +ve values increase speed, -ve decrease, by a factor of 10% per increment. Allowed values range from -MAX_GAMESPEED to +MAX_GAMESPEED. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="get"></a><h3>get</h3><pre><a href="#string">string</a> get([<a href="#string">string</a> &ret])</pre><p>Get a key from the queue. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getboardname"></a><h3>getBoardName</h3><pre><a href="#string">string</a> GetBoardName([<a href="#string">string</a> ret])</pre><p>Get the current board's file name. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getboardtile"></a><h3>getBoardTile</h3><pre><a href="#string">string</a> getBoardTile(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> z, [<a href="#string">string</a> &ret])</pre><p>Get the file name of the tile at x, y, z. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getboardtiletype"></a><h3>getBoardTileType</h3><pre><a href="#string">string</a> getBoardTileType(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> z[, <a href="#string">string</a> &ret])</pre><p>Get the type of a tile. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getcolor"></a><h3>getColor</h3><pre><a href="#void">void</a> getColor(<a href="#int">int</a> &r, <a href="#int">int</a> &g, <a href="#int">int</a> &b)</pre><p>Get the current colour. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getcorner"></a><h3>getCorner</h3><pre><a href="#void">void</a> getCorner(<a href="#int">int</a> &topX, <a href="#int">int</a> &topY)</pre><p>Get the corner of the currently shown portion of the board. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getdp"></a><h3>getDp</h3><pre><a href="#int">int</a> getDp(<a href="#string">string</a> handle, [<a href="#int">int</a> &ret])</pre><p>Get a fighter's dp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getfontsize"></a><h3>getFontSize</h3><pre><a href="#int">int</a> getFontSize([<a href="#int">int</a> &ret])</pre><p>Get the current font size. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getfp"></a><h3>getFp</h3><pre><a href="#int">int</a> getFp(<a href="#string">string</a> handle, [<a href="#int">int</a> &ret])</pre><p>Get a fighter's fp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getgp"></a><h3>getGp</h3><pre><a href="#int">int</a> getGp([<a href="#int">int</a> &ret])</pre><p>Return the amount of gold pieces held. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="gethp"></a><h3>getHp</h3><pre><a href="#int">int</a> getHp(<a href="#string">string</a> handle, [<a href="#int">int</a> &ret])</pre><p>Get a fighter's hp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getitemcost"></a><h3>getItemCost</h3><pre><a href="#int">int</a> getItemCost(<a href="#string">string</a> fileName[, <a href="#int">int</a> &ret])</pre><p>Get an item's cost. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getitemdesc"></a><h3>getItemDesc</h3><pre><a href="#string">string</a> getItemDesc(<a href="#string">string</a> fileName[, <a href="#string">string</a> &ret])</pre><p>Get an item's description. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getitemname"></a><h3>getItemName</h3><pre><a href="#string">string</a> getItemName(<a href="#string">string</a> fileName[, <a href="#string">string</a> &ret])</pre><p>Get an item's handle. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getitemsellprice"></a><h3>getItemSellPrice</h3><pre><a href="#int">int</a> getItemSellPrice(<a href="#string">string</a> fileName[, <a href="#int">int</a> &ret])</pre><p>Get the price for which an item sells. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getlevel"></a><h3>getLevel</h3><pre><a href="#int">int</a> getLevel(<a href="#string">string</a> handle[, <a href="#int">int</a> &ret])</pre><p>Get the level of a player. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getmaxhp"></a><h3>getMaxHp</h3><pre><a href="#int">int</a> getMaxHp(<a href="#string">string</a> handle, [<a href="#int">int</a> &ret])</pre><p>Get a fighter's max hp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getmaxsmp"></a><h3>getMaxSmp</h3><pre><a href="#int">int</a> getMaxSmp(<a href="#string">string</a> handle, [<a href="#int">int</a> &ret])</pre><p>Get a fighter's max smp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getpixel"></a><h3>getPixel</h3><pre><a href="#void">void</a> getPixel(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> &r, <a href="#int">int</a> &g, <a href="#int">int</a> &b, [<a href="#canvas">canvas</a> cnv])</pre><p>Get the colour of the pixel at (x, y). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getres"></a><h3>getRes</h3><pre><a href="#void">void</a> getRes(<a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p>Get the screen's resolution. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getsmp"></a><h3>getSmp</h3><pre><a href="#int">int</a> getSmp(<a href="#string">string</a> handle, [<a href="#int">int</a> &ret])</pre><p>Get a fighter's smp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="gettextheight"></a><h3>gettextheight</h3><pre><a href="#int">int</a> gettextheight(<a href="#string">string</a> text)</pre><p>Get the height of a string of text in pixels, relative to the current font and size. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="gettextwidth"></a><h3>gettextwidth</h3><pre><a href="#int">int</a> gettextwidth(<a href="#string">string</a> text)</pre><p>Get the width of a string of text in pixels, relative to the current font and size. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="getthreadid"></a><h3>getThreadId</h3><pre><a href="#thread">thread</a> getThreadId([<a href="#thread">thread</a> &ret])</pre><p>Get the ID of this thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="gettickcount"></a><h3>getTickCount</h3><pre><a href="#int">int</a> getTickCount()</pre><p>Get the number of milliseconds since Windows started. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="giveexp"></a><h3>giveExp</h3><pre><a href="#void">void</a> giveExp(<a href="#string">string</a> handle, <a href="#int">int</a> amount)</pre><p>Give experience to a player. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="givegp"></a><h3>giveGp</h3><pre><a href="#void">void</a> giveGp(<a href="#int">int</a> gp)</pre><p>Give gold pieces. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="givehp"></a><h3>giveHp</h3><pre><a href="#void">void</a> giveHp(<a href="#string">string</a> handle, <a href="#int">int</a> add)</pre><p>Increase a fighter's current hp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="giveitem"></a><h3>giveItem</h3><pre><a href="#void">void</a> giveItem(<a href="#string">string</a> itm)</pre><p>Add an item to the inventory. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="givesmp"></a><h3>giveSmp</h3><pre><a href="#void">void</a> giveSmp(<a href="#string">string</a> handle, <a href="#int">int</a> value)</pre><p>Increase a fighter's smp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="godos"></a><h3>goDos</h3><pre><a href="#void">void</a> goDos(<a href="#string">string</a> command)</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="gone"></a><h3>gone</h3><pre><a href="#void">void</a> gone()</pre><p>Remove the currently running program from the board until the board has been left. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="hp"></a><h3>hp</h3><pre><a href="#void">void</a> hp(<a href="#string">string</a> handle, <a href="#int">int</a> value)</pre><p>Set a fighter's hp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="iif"></a><h3>iif</h3><pre><a href="#void">void</a> iif(condition, true, false)</pre><p>Obsolete. Use the tertiary operator result = (expression ? true part : false part) </p><p>[ <a href="#">top</a> ]</p><hr /><a id="inn"></a><h3>inn</h3><pre><a href="#void">void</a> inn()</pre><p>Fully heal the player party. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="instr"></a><h3>inStr</h3><pre><a href="#int">int</a> inStr(<a href="#string">string</a> haystack, <a href="#string">string</a> needle[, <a href="#int">int</a> offset])</pre><p>Returns the first occurence of needle within haystack, optionally starting from an offset. Both the return value and the offset are one-based. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="internalmenu"></a><h3>internalMenu</h3><pre><a href="#void">void</a> internalMenu(<a href="#int">int</a> menu)</pre><p>Show a menu using the menu plugin.<ul> <li>0 - main menu</li> <li>1 - item menu</li> <li>2 - equip menu</li> <li>4 (sic) - abilities menu</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="italics"></a><h3>italics</h3><pre><a href="#void">void</a> italics(<a href="#bool">bool</a> enable)</pre><p>Toggle italicizing of text. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemcount"></a><h3>itemCount</h3><pre><a href="#int">int</a> itemCount(<a href="#string">string</a> fileName[, <a href="#int">int</a> &ret])</pre><p>Count the number of a certain item in the inventory. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemdirection"></a><h3>itemDirection</h3><pre><a href="#int">int</a> itemDirection(<a href="#variant">variant</a> handle)</pre><pre><a href="#void">void</a> itemDirection(<a href="#variant">variant</a> handle, <a href="#int">int</a> dir)</pre><p><ol><li>Returns the item direction.</li> <li>Sets the item direction.</li></ol> </p><p>See playerDirection() for direction indices. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemgetpath"></a><h3>itemGetPath</h3><pre><a href="#int">int</a> itemGetPath(<a href="#variant">variant</a> handle)</pre><pre><a href="#void">void</a> itemGetPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> index, <a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p><ol><li>Get the number of points in the sprite's path.</li> <li>Get the coordinates of a point in the sprite's path.</li></ol> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemlocation"></a><h3>itemlocation</h3><pre><a href="#void">void</a> itemlocation(<a href="#variant">variant</a> handle, <a href="#int">int</a> &x, <a href="#int">int</a> &y, <a href="#int">int</a> &layer)</pre><p>Get the location of an item. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itempath"></a><h3>itemPath</h3><pre><a href="#void">void</a> itemPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags, <a href="#int">int</a> x1, <a href="#int">int</a> y1, ... , <a href="#int">int</a> xn, <a href="#int">int</a> yn)</pre><pre><a href="#void">void</a> itemPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags | tkMV_PATHFIND, <a href="#int">int</a> x1, <a href="#int">int</a> y1)</pre><pre><a href="#void">void</a> itemPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags | tkMV_WAYPOINT_PATH, <a href="#variant">variant</a> boardpath, <a href="#int">int</a> cycles)</pre><pre><a href="#void">void</a> itemPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags | tkMV_WAYPOINT_LINK, <a href="#variant">variant</a> boardpath, <a href="#int">int</a> cycles)</pre><p>Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter. 'handle' must be a board index value or 'target' or 'source', not the item's internal handle. </p><p><ol><li>Sprite walks the explicit path given by x1, y1 to xn, yn.<br /> Required flag: none.</li> <li>Sprite walks to x1, y1 via the shortest route (by pathfinding).<br /> Required flag: tkMV_PATHFIND.</li> <li>Sprite walks a board-set waypoint vector.<br /> Required flag: tkMV_WAYPOINT_PATH.<br /> The points of the vector are added to the sprite's queue.</li> <li>A link is made between sprite and waypoint vector.<br /> Required flag: tkMV_WAYPOINT_LINK.<br /> Set cycles = 0 to walk infinitely.<br /> Set boardpath = -1 to clear link to waypoint vector before cycles expires.<br /> The sprite will resume the the path if other movement commands are given to it, after completion.</li></ol> </p><p>Possible flags for all options:<ul> <li>tkMV_PAUSE_THREAD:	Hold thread execution until movement ends.</li> <li>tkMV_CLEAR_QUEUE:	Clear any previously queued movements.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemspeed"></a><h3>itemspeed</h3><pre><a href="#void">void</a> itemspeed(<a href="#variant">variant</a> handle, <a href="#int">int</a> speed)</pre><p>Set the delay in seconds between an item's steps. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemstance"></a><h3>itemstance</h3><pre><a href="#void">void</a> itemstance(<a href="#handle">handle</a> item, <a href="#string">string</a> stance [, <a href="#int">int</a> flags])</pre><p>Animate an item's custom stance. </p><p>Possible flags tkMV_PAUSE_THREAD:	Hold thread execution until animation ends. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemstep"></a><h3>itemstep</h3><pre><a href="#void">void</a> itemstep(<a href="#variant">variant</a> handle, <a href="#int">int</a> x, <a href="#int">int</a> y [, <a href="#int">int</a> flags])</pre><p>Causes the item to take one step in the direction of x, y following a route determined by pathFind. </p><p>Possible flags<ul> <li>tkMV_PAUSE_THREAD:	Hold thread execution until movement ends.</li> <li>tkMV_CLEAR_QUEUE:	Clear any previously queued movements.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="itemwalkspeed"></a><h3>itemWalkSpeed</h3><pre><a href="#void">void</a> itemWalkSpeed()</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="kill"></a><h3>kill</h3><pre><a href="#void">void</a> kill(<a href="#variant">variant</a> &var, ...)</pre><p>Delete variables. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="killcanvas"></a><h3>killCanvas</h3><pre><a href="#void">void</a> killCanvas(<a href="#canvas">canvas</a> cnv)</pre><p>Kill a canvas. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="killcursormap"></a><h3>killCursorMap</h3><pre><a href="#void">void</a> killCursorMap(<a href="#cursor_map">cursor_map</a> map)</pre><p>Kill a cursor map. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="killthread"></a><h3>killThread</h3><pre><a href="#void">void</a> killThread(<a href="#thread">thread</a> id)</pre><p>Kill a thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="layerput"></a><h3>layerput</h3><pre><a href="#void">void</a> layerput(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> layer, <a href="#string">string</a> tile)</pre><p>Place a tile on the board for the duration the player is on the board. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="lcase"></a><h3>lcase</h3><pre><a href="#string">string</a> lcase(<a href="#string">string</a> str, [<a href="#string">string</a> &ret])</pre><p>Convert a string to lowercase. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="left"></a><h3>left</h3><pre><a href="#string">string</a> left(<a href="#string">string</a> str, <a href="#int">int</a> amount[, <a href="#string">string</a> &ret])</pre><p>Get characters from the left of a string. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="len"></a><h3>len</h3><pre><a href="#int">int</a> len(<a href="#string">string</a> str[, <a href="#int">int</a> &ret])</pre><p>Get the length of a string. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="load"></a><h3>load</h3><pre><a href="#void">void</a> load(<a href="#string">string</a> file)</pre><p>Load the game state from a file. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="log"></a><h3>log</h3><pre><a href="#double">double</a> log(<a href="#double">double</a> x, [<a href="#double">double</a> &ret])</pre><p>Returns <b>n</b> such that <b>e</b><sup><b>n</b></sup> = <b>x</b>. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mainfile"></a><h3>mainFile</h3><pre><a href="#void">void</a> mainFile(<a href="#string">string</a> gam)</pre><p>Load a new main file. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="maxhp"></a><h3>maxHp</h3><pre><a href="#void">void</a> maxHp(<a href="#string">string</a> handle, <a href="#int">int</a> value)</pre><p>Set a fighter's max hp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="maxsmp"></a><h3>maxSmp</h3><pre><a href="#void">void</a> maxSmp(<a href="#string">string</a> handle, <a href="#int">int</a> value)</pre><p>Set a fighter's max smp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mediaplay"></a><h3>mediaPlay</h3><pre><a href="#void">void</a> mediaPlay(<a href="#string">string</a> file)</pre><p>Play the specified file as the background music. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mediastop"></a><h3>mediaStop</h3><pre><a href="#void">void</a> mediaStop()</pre><p>Stop the background music. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mem"></a><h3>mem</h3><pre><a href="#void">void</a> mem(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> pos)</pre><p>Lay a scanned tile on the screen at the specified position. @deprecated </p><p>[ <a href="#">top</a> ]</p><hr /><a id="menugraphic"></a><h3>menuGraphic</h3><pre><a href="#void">void</a> menuGraphic(<a href="#string">string</a> image)</pre><p>Choose an image for the menu. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mid"></a><h3>mid</h3><pre><a href="#string">string</a> mid(<a href="#string">string</a> str, <a href="#int">int</a> start, <a href="#int">int</a> length[, <a href="#string">string</a> &dest])</pre><p>Obtain a substring. The offset is one-based. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mouseclick"></a><h3>mouseclick</h3><pre><a href="#void">void</a> mouseclick(<a href="#int">int</a> &x, <a href="#int">int</a> &y [, <a href="#bool">bool</a> noWait])</pre><p>Wait for a mouseclick or immediately retrieve the last and return the x, y location (pixel values relative to the window). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mousecursor"></a><h3>mouseCursor</h3><pre><a href="#void">void</a> mouseCursor(<a href="#string">string</a> file, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> red, <a href="#int">int</a> green. <a href="#int">int</a> blue)</pre><p>Change the mouse cursor. "TK DEFAULT" or "" restores the default cursor. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mousemove"></a><h3>mousemove</h3><pre><a href="#void">void</a> mousemove(<a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p>Wait for the mouse to move and return the x,y location in pixels from the window corner. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="move"></a><h3>move</h3><pre><a href="#void">void</a> move(<a href="#int">int</a> x, <a href="#int">int</a> y, [<a href="#int">int</a> z = 1])</pre><p>Move this board program to a new location on the board. The effect lasts until the board has been left. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mp3pause"></a><h3>mp3pause</h3><pre><a href="#void">void</a> mp3pause()</pre><p>Play a sound effect and pause the engine until it finishes. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="msgbox"></a><h3>msgBox</h3><pre><a href="#int">int</a> msgBox(<a href="#string">string</a> text [,<a href="#string">string</a> title [, <a href="#int">int</a> style [, <a href="#int">int</a> textColor [, <a href="#int">int</a> backColor [, <a href="#string">string</a> bitmap]]]]])</pre><p>Display a message box containing one or two buttons, handled using a cursor map (keyboard input only). The background is drawn translucently using the MWin() translucency value. Any background image supplied is stretched to the size of the box. </p><p><ul><li>style = 0: 'OK' button; function returns 1.</li> <li>style = 1: 'Yes' and 'No' buttons: 'Yes' returns 6 and 'No' returns 7.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="multirun"></a><h3>multirun</h3><pre><a href="#void">void</a> multirun()</pre><p>Multirun()'s behaviour depends on the program's context. In a thread: No action.<br /> In a program (non-thread): All sprite movements called are queued up and movement begins after the closing brace of the function, thereby allowing simultaneous movement. Previously occurring movements are cleared. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mwin"></a><h3>mwin</h3><pre><a href="#void">void</a> mwin(<a href="#string">string</a> str)</pre><p>Show the message window. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mwincls"></a><h3>mwinCls</h3><pre><a href="#void">void</a> mwinCls()</pre><p>Clear and hide the message window. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="mwinsize"></a><h3>mwinsize</h3><pre><a href="#void">void</a> mwinsize(<a href="#int">int</a> percent)</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="newplayer"></a><h3>newPlayer</h3><pre><a href="#void">void</a> newPlayer(<a href="#string">string</a> file)</pre><p>Change the graphics of the main player to that of the file passed in. The file must be a character file (*.tem) </p><p>[ <a href="#">top</a> ]</p><hr /><a id="onboard"></a><h3>onBoard</h3><pre><a href="#int">int</a> onBoard(<a href="#variant">variant</a> handle)</pre><p>Return whether a player is being shown on the board. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="openfileappend"></a><h3>openFileAppend</h3><pre><a href="#void">void</a> openFileAppend(<a href="#string">string</a> file, <a href="#string">string</a> folder)</pre><p>Open a file for appending. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="openfilebinary"></a><h3>openFileBinary</h3><pre><a href="#void">void</a> openFileBinary(<a href="#string">string</a> file, <a href="#string">string</a> folder)</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="openfileinput"></a><h3>openFileInput</h3><pre><a href="#void">void</a> openFileInput(<a href="#string">string</a> file, <a href="#string">string</a> folder)</pre><p>Open a file in input mode. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="openfileoutput"></a><h3>openFileOutput</h3><pre><a href="#void">void</a> openFileOutput(<a href="#string">string</a> file, <a href="#string">string</a> folder)</pre><p>Open a file in output mode. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="over"></a><h3>over</h3><pre><a href="#void">void</a> over()</pre><p>Displays a game over message and resets the game. Because you can (and should) set a game over program, this function is pointless. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="parallax"></a><h3>parallax</h3><pre><a href="#void">void</a> parallax(<a href="#int">int</a> setting)</pre><p>obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="pixelmovement"></a><h3>pixelMovement</h3><pre><a href="#bool">bool</a> pixelMovement([<a href="#bool">bool</a> pixelMovement [, <a href="#bool">bool</a> pixelPush]])</pre><p>Toggles pixel movement and push() et al. in pixels. Returns whether pixel movement is being used. pixelPush is ineffective for tile movement. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="pixeltext"></a><h3>pixelText</h3><pre><a href="#void">void</a> pixelText(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#string">string</a> str, [<a href="#canvas">canvas</a> cnv])</pre><p>Displays text on the screen using pixel coordinates. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playavi"></a><h3>playAvi</h3><pre><a href="#void">void</a> playAvi(<a href="#string">string</a> movie)</pre><p>Play a movie full screen.<br /> Supported types are *.avi, *.mpg, and *.mov. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playavismall"></a><h3>playAviSmall</h3><pre><a href="#void">void</a> playAviSmall(<a href="#string">string</a> movie)</pre><p>Play a movie at actual size, centred. Supported types are *.avi, *.mpg, and *.mov. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playerdirection"></a><h3>playerDirection</h3><pre><a href="#int">int</a> playerDirection(<a href="#variant">variant</a> handle)</pre><pre><a href="#void">void</a> playerDirection(<a href="#variant">variant</a> handle, <a href="#int">int</a> dir)</pre><p><ol><li>Returns the player direction.</li> <li>Sets the player direction.</li></ol> </p><p>Directions are assigned the following constants:<ul> <li>East: tkDIR_E</li> <li>Southeast: tkDIR_SE</li> <li>South: tkDIR_S</li> <li>Southwest: tkDIR_SW</li> <li>West: tkDIR_W</li> <li>Northwest: tkDIR_NW</li> <li>North: tkDIR_N</li> <li>Northeast: tkDIR_NE</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playergetpath"></a><h3>playerGetPath</h3><pre><a href="#int">int</a> playerGetPath(<a href="#variant">variant</a> handle)</pre><pre><a href="#void">void</a> playerGetPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> index, <a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p><ol><li>Get the number of points in the sprite's path.</li> <li>Get the coordinates of a point in the sprite's path.</li></ol> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playerlocation"></a><h3>playerlocation</h3><pre><a href="#void">void</a> playerlocation(<a href="#variant">variant</a> handle, <a href="#int">int</a> &x, <a href="#int">int</a> &y, <a href="#int">int</a> &layer)</pre><p>Get the location of a player. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playerpath"></a><h3>playerPath</h3><pre><a href="#void">void</a> playerPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags, <a href="#int">int</a> x1, <a href="#int">int</a> y1, ... , <a href="#int">int</a> xn, <a href="#int">int</a> yn)</pre><pre><a href="#void">void</a> playerPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags | tkMV_PATHFIND, <a href="#int">int</a> x1, <a href="#int">int</a> y1)</pre><pre><a href="#void">void</a> playerPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags | tkMV_WAYPOINT_PATH, <a href="#variant">variant</a> boardpath, <a href="#int">int</a> cycles)</pre><pre><a href="#void">void</a> playerPath(<a href="#variant">variant</a> handle, <a href="#int">int</a> flags | tkMV_WAYPOINT_LINK, <a href="#variant">variant</a> boardpath, <a href="#int">int</a> cycles)</pre><p>Causes the sprite to walk a path between a given set of co-ordinates, depending on the flags parameter. </p><p><ol><li>Sprite walks the explicit path given by x1, y1 to xn, yn.<br /> Required flag: none.</li> <li>Sprite walks to x1, y1 via the shortest route (by pathfinding).<br /> Required flag: tkMV_PATHFIND.</li> <li>Sprite walks a board-set waypoint vector.<br /> Required flag: tkMV_WAYPOINT_PATH.<br /> The points of the vector are added to the sprite's queue.</li> <li>A link is made between sprite and waypoint vector.<br /> Required flag: tkMV_WAYPOINT_LINK.<br /> Set cycles = 0 to walk infinitely.<br /> Set boardpath = -1 to clear link to waypoint vector before cycles expires.<br /> The sprite will resume the the path if other movement commands are given to it, after completion.</li></ol> </p><p>Possible flags for all options:<ul> <li>tkMV_PAUSE_THREAD:	Hold thread execution until movement ends.</li> <li>tkMV_CLEAR_QUEUE:	Clear any previously queued movements.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playerspeed"></a><h3>playerspeed</h3><pre><a href="#void">void</a> playerspeed(<a href="#string">string</a> handle, <a href="#int">int</a> speed)</pre><p>Set the delay in seconds between a player's steps. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playerstance"></a><h3>playerstance</h3><pre><a href="#void">void</a> playerstance(<a href="#handle">handle</a> player, <a href="#string">string</a> stance [, <a href="#int">int</a> flags])</pre><p>Animate a player's custom stance. </p><p>Possible flags tkMV_PAUSE_THREAD:	Hold thread execution until animation ends. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="playerstep"></a><h3>playerstep</h3><pre><a href="#void">void</a> playerstep(<a href="#variant">variant</a> handle, <a href="#int">int</a> x, <a href="#int">int</a> y [, <a href="#int">int</a> flags])</pre><p>Causes the player to take one step in the direction of x, y following a route determined by pathFind. </p><p>Possible flags<ul> <li>tkMV_PAUSE_THREAD:	Hold thread execution until movement ends.</li> <li>tkMV_CLEAR_QUEUE:	Clear any previously queued movements.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="posture"></a><h3>posture</h3><pre><a href="#void">void</a> posture(<a href="#int">int</a> id [, <a href="#handle">handle</a> player])</pre><p>Show a custom player animation named "Custom" + str(id) (e.g. "Custom1") This command is obsolete - use playerStance() instead. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="prg"></a><h3>prg</h3><pre><a href="#void">void</a> prg(<a href="#string">string</a> program. <a href="#int">int</a> x, <a href="#int">int</a> y, [<a href="#int">int</a> z = 1])</pre><p>Move a program on the current board to a new location. This stays in effect until the board is left. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="print"></a><h3>print</h3><pre><a href="#void">void</a> print(<a href="#string">string</a> text)</pre><p>Write the specified string one line down from the last call to text(). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="prompt"></a><h3>prompt</h3><pre><a href="#string">string</a> prompt(<a href="#string">string</a> question, [<a href="#string">string</a> &ret])</pre><p>Ask the player a question and return the result. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="push"></a><h3>push</h3><pre><a href="#void">void</a> push(<a href="#string">string</a> direction [, <a href="#variant">variant</a> handle [, <a href="#int">int</a> flags]])</pre><p>Push the player with the specified handle, or the default player if no handle is specified, along the given directions. The direction should be a comma delimited, but if it is not, it will be delimited for backward compatibility. These styles are accepted, and can be mixed even within the same directonal string: </p><p><ul><li>N, S, E, W, NE, NW, SE, SW</li> <li>NORTH, SOUTH, EAST, WEST, NORTHEAST, NORTHWEST, SOUTHEAST, SOUTHWEST</li> <li>1, 2, 3, 4, 5, 6, 7, 8</li></ul> </p><p>Possible flags<ul> <li>tkMV_PAUSE_THREAD:	Hold thread execution until movement ends.</li> <li>tkMV_CLEAR_QUEUE:	Clear any previously queued movements.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="pushitem"></a><h3>pushItem</h3><pre><a href="#void">void</a> pushItem(<a href="#variant">variant</a> item, <a href="#string">string</a> direction [, <a href="#int">int</a> flags])</pre><p>The first parameter accepts either a string that can be either "target" or "source" direction or the number of an item. The syntax of the directional string is the same as for [[push()]]. </p><p>Possible flags<ul> <li>tkMV_PAUSE_THREAD:	Hold thread execution until movement ends.</li> <li>tkMV_CLEAR_QUEUE:	Clear any previously queued movements.</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="put"></a><h3>put</h3><pre><a href="#void">void</a> put(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#string">string</a> tile)</pre><p>Puts a tile at the specified location on the board. The tile persists only until the program ends. Use LayerPut() to place a tile for the duration the user is on the board. x and y are specified in tile coordinates. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="putitem"></a><h3>putitem</h3><pre><a href="#void">void</a> putitem(<a href="#variant">variant</a> handle, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> layer)</pre><p>Place the item on the board at the given location. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="putplayer"></a><h3>putplayer</h3><pre><a href="#void">void</a> putplayer(<a href="#string">string</a> handle, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> layer)</pre><p>Place the player on the board at the given location. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="random"></a><h3>random</h3><pre><a href="#int">int</a> random(<a href="#int">int</a> max, [<a href="#int">int</a> &ret])</pre><p>Generate a random number from one to the supplied maximum, inclusive. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="regexpreplace"></a><h3>regExpReplace</h3><pre><a href="#string">string</a> regExpReplace(<a href="#string">string</a> subject, <a href="#string">string</a> pattern, <a href="#string">string</a> replace)</pre><p>Replace using a regular expression. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="remove"></a><h3>remove</h3><pre><a href="#void">void</a> remove(<a href="#variant">variant</a> handle, <a href="#int">int</a> location)</pre><p>Remove an equipped item and return it to the inventory. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="removeplayer"></a><h3>removePlayer</h3><pre><a href="#void">void</a> removePlayer(<a href="#string">string</a> handle)</pre><p>Remove a player from the party [to an old player list]. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="removestatus"></a><h3>removeStatus</h3><pre><a href="#void">void</a> removeStatus(<a href="#string">string</a> target, <a href="#string">string</a> file)</pre><p>Remove a status effect from a fighter. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="rendernow"></a><h3>rendernow</h3><pre><a href="#void">void</a> rendernow(<a href="#bool">bool</a> draw)</pre><p>Controls rendering of the cnvRenderNow reserved canvas. The canvas is drawn every frame above all board elements (e.g. tiles, sprites, animations). Access the canvas by passing 'cnvRenderNow' to the drawing functions. Do not call CreateCanvas() or KillCanvas() on cnvRenderNow. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="replace"></a><h3>replace</h3><pre><a href="#string">string</a> replace(<a href="#string">string</a> str, <a href="#string">string</a> find, <a href="#string">string</a> replace[, <a href="#string">string</a> &dest])</pre><p>Replace within a string. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="reset"></a><h3>reset</h3><pre><a href="#void">void</a> reset()</pre><p>Reset the game. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="restoreplayer"></a><h3>restorePlayer</h3><pre><a href="#void">void</a> restorePlayer(<a href="#string">string</a> filename)</pre><p>Restore a player who was previously on the team. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="restorescreen"></a><h3>restorescreen</h3><pre><a href="#void">void</a> restorescreen([<a href="#int">int</a> x1, <a href="#int">int</a> y1, <a href="#int">int</a> x2, <a href="#int">int</a> y2, <a href="#int">int</a> xdest, <a href="#int">int</a> ydest])</pre><p>Draw a buffered screen capture to the screen. The canvas drawn is the first in the screen array. x1, x2 specify the bottom- right corner of the screen, so that width = x2 - x1, etc. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="restorescreenarray"></a><h3>restorescreenarray</h3><pre><a href="#void">void</a> restorescreenarray(<a href="#int">int</a> pos [,<a href="#int">int</a> x1, <a href="#int">int</a> y1, <a href="#int">int</a> x2, <a href="#int">int</a> y2, <a href="#int">int</a> xdest, <a href="#int">int</a> ydest])</pre><p>Draw a buffered screen capture to the screen. x1, x2 specify the bottom-right corner of the screen, so that width = x2 - x1, etc. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="resumenext"></a><h3>resumeNext</h3><pre><a href="#void">void</a> resumeNext()</pre><p>Return to the statement after the statement where an error occurred. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="right"></a><h3>right</h3><pre><a href="#string">string</a> right(<a href="#string">string</a> str, <a href="#int">int</a> amount, [<a href="#string">string</a> &ret])</pre><p>Get characters from the right of a string. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="rpgcode"></a><h3>rpgCode</h3><pre><a href="#void">void</a> rpgCode(<a href="#string">string</a> line)</pre><p>Independently run a line of RPGCode. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="run"></a><h3>run</h3><pre><a href="#void">void</a> run(<a href="#string">string</a> program)</pre><p>Transfer control to a different program. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="save"></a><h3>save</h3><pre><a href="#void">void</a> save(<a href="#string">string</a> file)</pre><p>Save the current game state to a file. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="savescreen"></a><h3>savescreen</h3><pre><a href="#void">void</a> savescreen([<a href="#int">int</a> position = 0])</pre><p>Save the current screen onto a canvas that can be restored at a later time. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="scan"></a><h3>scan</h3><pre><a href="#void">void</a> scan(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> pos)</pre><p>Save the tile specified to a buffer identified by pos. There is no particular number to pick for pos; any will do. @deprecated </p><p>[ <a href="#">top</a> ]</p><hr /><a id="send"></a><h3>send</h3><pre><a href="#void">void</a> send(<a href="#string">string</a> file, <a href="#int">int</a> x, <a href="#int">int</a> y, [<a href="#int">int</a> z = 1])</pre><p>Send the player to a new board. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setambientlevel"></a><h3>setAmbientLevel</h3><pre><a href="#void">void</a> setAmbientLevel(<a href="#int">int</a> red, <a href="#int">int</a> green, <a href="#int">int</a> blue)</pre><p>Set the global ambient level. Valid values range from -255 to + 255. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setbutton"></a><h3>setbutton</h3><pre><a href="#void">void</a> setbutton(<a href="#string">string</a> file, <a href="#int">int</a> slot, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> width, <a href="#int">int</a> height)</pre><p>Create and draw a clickable button at screen pixel co-ords x, y that persists until clearButtons() is called. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setconstants"></a><h3>setconstants</h3><pre><a href="#void">void</a> setconstants(...)</pre><p>Description. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="seterrorhandler"></a><h3>setErrorHandler</h3><pre><a href="#void">void</a> setErrorHandler(<a href="#label">label</a> lbl)</pre><p>Set an error handler for the current function. This <i>does not</i> propagate up the call stack! Refer to the language features section of the manual for more information. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setimage"></a><h3>setImage</h3><pre><a href="#void">void</a> setImage(<a href="#string">string</a> str, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> width, <a href="#int">int</a> height, [<a href="#canvas">canvas</a> cnv])</pre><p>Set an image. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setimageadditive"></a><h3>setImageAdditive</h3><pre><a href="#void">void</a> setImageAdditive(<a href="#string">string</a> file, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> width, <a href="#int">int</a> height, <a href="#double">double</a> percent[, <a href="#canvas">canvas</a> cnv])</pre><p>Set an image with a tint of the specified percent. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setimagetranslucent"></a><h3>setImageTranslucent</h3><pre><a href="#void">void</a> setImageTranslucent(<a href="#string">string</a> file, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> width, <a href="#int">int</a> height, [<a href="#canvas">canvas</a> cnv])</pre><p>Set an image translucently. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setimagetransparent"></a><h3>setImageTransparent</h3><pre><a href="#void">void</a> setImageTransparent(<a href="#string">string</a> file, <a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#int">int</a> width, <a href="#int">int</a> height, <a href="#int">int</a> r, <a href="#int">int</a> g, <a href="#int">int</a> b, [<a href="#canvas">canvas</a> cnv])</pre><p>Set an image with a transparent colour. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setmwintranslucency"></a><h3>setMwinTranslucency</h3><pre><a href="#void">void</a> setMwinTranslucency(<a href="#int">int</a> percent)</pre><p>Set the translucency of the message window.<br /> 0% is invisible; 100% is opaque. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setpixel"></a><h3>setPixel</h3><pre><a href="#void">void</a> setPixel(<a href="#int">int</a> x, <a href="#int">int</a> y, [<a href="#canvas">canvas</a> cnv])</pre><p>Set a pixel in the current colour. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setresumenexthandler"></a><h3>setResumeNextHandler</h3><pre><a href="#void">void</a> setResumeNextHandler()</pre><p>Cause errors in the current function to be silently ignored. This <i>does not</i> propagate up the call stack! </p><p>[ <a href="#">top</a> ]</p><hr /><a id="setvolume"></a><h3>setvolume</h3><pre><a href="#void">void</a> setvolume(<a href="#int">int</a> percent)</pre><p>Set the volume of all music and sound using a value between 0 and 100. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="shopcolors"></a><h3>shopcolors</h3><pre><a href="#void">void</a> shopcolors(<a href="#int">int</a> index, <a href="#int">int</a> r, <a href="#int">int</a> g, <a href="#int">int</a> b)</pre><p>Set the colors used in CallShop(). This function is obsolete from 3.1.0. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="sin"></a><h3>sin</h3><pre><a href="#double">double</a> sin(<a href="#double">double</a> x, [<a href="#double">double</a> &ret])</pre><p>Calculate sine x. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="smartstep"></a><h3>smartStep</h3><pre><a href="#void">void</a> smartStep()</pre><p>Toggle "smart" stepping. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="smp"></a><h3>smp</h3><pre><a href="#void">void</a> smp(<a href="#string">string</a> handle, <a href="#int">int</a> value)</pre><p>Set a fighter's smp. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="sound"></a><h3>sound</h3><pre><a href="#void">void</a> sound()</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="sourcehandle"></a><h3>sourcehandle</h3><pre><a href="#string">string</a> sourcehandle([<a href="#string">string</a> &ret])</pre><p>Get the handle of the source object. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="sourcelocation"></a><h3>sourcelocation</h3><pre><a href="#void">void</a> sourcelocation(<a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p>Get the location of the source object. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="splicevariables"></a><h3>spliceVariables</h3><pre><a href="#string">string</a> spliceVariables(<a href="#string">string</a> str)</pre><p>Replaces substrings within angle brackets by the value of variables with respective names. </p><p>e.g. "&lt;x&gt;" would be replaced by the value of "x". </p><p>[ <a href="#">top</a> ]</p><hr /><a id="split"></a><h3>split</h3><pre><a href="#int">int</a> split(<a href="#string">string</a> str, <a href="#string">string</a> delimiter, <a href="#array">array</a> arr)</pre><p>Splits a string at a delimiter. Returns the number of upper bound of the array (i.e. the index of the last set element). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="spritetranslucency"></a><h3>spriteTranslucency</h3><pre><a href="#void">void</a> spriteTranslucency(<a href="#int">int</a> percent)</pre><pre><a href="#int">int</a> spriteTranslucency(void)</pre><p>Set the degree to which sprites drawn underneath other objects are visible. Specify a value between 0 (invisible) and 100 (opaque). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="sqrt"></a><h3>sqrt</h3><pre><a href="#double">double</a> sqrt(<a href="#double">double</a> x, [<a href="#double">double</a> &ret])</pre><p>Calculate the square root of x. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="stance"></a><h3>stance</h3><pre><a href="#void">void</a> stance(<a href="#int">int</a> id [, <a href="#handle">handle</a> player])</pre><p>Show a player stance. This command is obsolete - use playerStance() instead. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="start"></a><h3>start</h3><pre><a href="#void">void</a> start(<a href="#string">string</a> file)</pre><p>Open a file with the shell. </p><p>There is unfortunately no default directory for this function and assuming one will only break backward compatibility in some obscure manner. </p><p>Note also that previous incarnations prevented the launching of executables and shortcuts, but this is a nonsensical security measure when plugins no longer display a silly warning box, and this function can be trivially modified by someone who intends to be malicious. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="statictext"></a><h3>staticText</h3><pre><a href="#void">void</a> staticText()</pre><p>obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="takegp"></a><h3>takeGp</h3><pre><a href="#void">void</a> takeGp(<a href="#int">int</a> gp)</pre><p>Take gold pieces. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="takeitem"></a><h3>takeItem</h3><pre><a href="#void">void</a> takeItem(<a href="#string">string</a> itm)</pre><p>Remove an item from the inventory. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="tan"></a><h3>tan</h3><pre><a href="#double">double</a> tan(<a href="#double">double</a> x, [<a href="#double">double</a> &ret])</pre><p>Calculate tangent x. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="targethandle"></a><h3>targethandle</h3><pre><a href="#string">string</a> targethandle([<a href="#string">string</a> &ret])</pre><p>Get the handle of the target object. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="targetlocation"></a><h3>targetlocation</h3><pre><a href="#void">void</a> targetlocation(<a href="#int">int</a> &x, <a href="#int">int</a> &y)</pre><p>Get the location of the target object. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="tellthread"></a><h3>tellThread</h3><pre><a href="#variant">variant</a> tellThread(<a href="#thread">thread</a> id, <a href="#string">string</a> code)</pre><p>Execute code in the context of a thread (e.g., to run a method located in another thread). TellThread() returns the value returned by the function called in the thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="text"></a><h3>text</h3><pre><a href="#void">void</a> text(<a href="#double">double</a> x, <a href="#double">double</a> y, <a href="#string">string</a> str, [<a href="#canvas">canvas</a> cnv])</pre><p>Displays text on the screen. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="textspeed"></a><h3>textSpeed</h3><pre><a href="#void">void</a> textSpeed(<a href="#int">int</a> speed)</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="thread"></a><h3>thread</h3><pre><a href="#thread">thread</a> thread(<a href="#string">string</a> file, <a href="#bool">bool</a> persist, [<a href="#thread">thread</a> &ret])</pre><p>Start a thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="threadsleep"></a><h3>threadSleep</h3><pre><a href="#void">void</a> threadSleep(<a href="#thread">thread</a> id, <a href="#double">double</a> seconds)</pre><p>Put a thread to sleep. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="threadsleepremaining"></a><h3>threadSleepRemaining</h3><pre><a href="#double">double</a> threadSleepRemaining(<a href="#thread">thread</a> id, [<a href="#double">double</a> &ret])</pre><p>Check how much sleep remains for a thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="threadwake"></a><h3>threadWake</h3><pre><a href="#void">void</a> threadWake(<a href="#thread">thread</a> id)</pre><p>Wake up a thread. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="tiletype"></a><h3>tileType</h3><pre><a href="#void">void</a> tileType(<a href="#int">int</a> x, <a href="#int">int</a> y, <a href="#string">string</a> type, [<a href="#int">int</a> z = 1])</pre><p>Change a tile's type. Valid types for the string parameter are "NORMAL", "SOLID", "UNDER", "NS", "EW", "STAIRS#". Do not use when using vectors - use vector tools instead. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="trim"></a><h3>trim</h3><pre><a href="#string">string</a> trim(<a href="#string">string</a> str, [<a href="#string">string</a> &ret])</pre><p>Trim whitespace from a string. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="ucase"></a><h3>ucase</h3><pre><a href="#string">string</a> ucase(<a href="#string">string</a> str, [<a href="#string">string</a> &ret])</pre><p>Convert a string to uppercase. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="underarrow"></a><h3>underArrow</h3><pre><a href="#void">void</a> underArrow()</pre><p>Toggle the under arrow. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="underline"></a><h3>underline</h3><pre><a href="#void">void</a> underline(<a href="#bool">bool</a> enable)</pre><p>Toggle underlining of text. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="viewbrd"></a><h3>viewbrd</h3><pre><a href="#void">void</a> viewbrd(<a href="#string">string</a> filename [, <a href="#int">int</a> x, <a href="#int">int</a> y [, <a href="#canvas">canvas</a> cnv]])</pre><p>Draw a board to the screen or to a canvas, starting at co-ordinates topX, topY. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wait"></a><h3>wait</h3><pre><a href="#string">string</a> wait([<a href="#string">string</a> &ret])</pre><p>Wait for a key to be pressed, and return the key that was. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="walkspeed"></a><h3>walkSpeed</h3><pre><a href="#void">void</a> walkSpeed()</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wander"></a><h3>wander</h3><pre><a href="#void">void</a> wander(<a href="#variant">variant</a> target, [<a href="#int">int</a> restrict = 0])</pre><p>The first parameter accepts either a string that can be either "target" or "source" or the number of an item. The selected item will take a step in a random direction, or as restricted by the optional parameter. The allowed values for said parameter are: </p><p><ul><li>0 - only north, south, east, and west on normal boards, only diagonals on isometric boards (default)</li> <li>1 - only north, south, east, and west</li> <li>2 - only diagonals</li> <li>3 - all directions</li></ul> </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wav"></a><h3>wav</h3><pre><a href="#void">void</a> wav(<a href="#string">string</a> file)</pre><p>Play a wave file (e.g. a sound effect). </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wavstop"></a><h3>wavstop</h3><pre><a href="#void">void</a> wavstop()</pre><p>Stop the current sound effect. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="win"></a><h3>win</h3><pre><a href="#void">void</a> win()</pre><p>Obsolete. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wincolor"></a><h3>winColor</h3><pre><a href="#void">void</a> winColor(<a href="#int">int</a> dos)</pre><p>Set the message window's colour using a DOS code. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wincolorrgb"></a><h3>winColorRgb</h3><pre><a href="#void">void</a> winColorRgb(<a href="#int">int</a> r, <a href="#int">int</a> g, <a href="#int">int</a> b)</pre><p>Set the message window's colour. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="windows"></a><h3>windows</h3><pre><a href="#void">void</a> windows()</pre><p>Exit to windows. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wingraphic"></a><h3>winGraphic</h3><pre><a href="#void">void</a> winGraphic(<a href="#string">string</a> file)</pre><p>Set the message window background image. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="wipe"></a><h3>wipe</h3><pre><a href="#void">void</a> wipe(<a href="#string">string</a> file, <a href="#int">int</a> effect [, <a href="#int">int</a> speed])</pre><p>Wipe' a graphic to the screen.<br /> file: filename of the image to wipe to.<br /> effect: numeric value between 1 and 12. The valid types are:<ul> <li>1  - Right</li> <li>2  - Left</li> <li>3  - Down</li> <li>4  - Up</li> <li>5  - NW to SE</li> <li>6  - NE to SW</li> <li>7  - SW to NE</li> <li>8  - SE to NW</li> <li>9  - Right 'zelda' style</li> <li>10 - Left 'zelda' style</li> <li>11 - Down 'zelda' style</li> <li>12 - Up 'zelda' style</li></ul> speed: default is 1, set higher to increase wipe speed. </p><p>[ <a href="#">top</a> ]</p><hr /><a id="zoom"></a><h3>zoom</h3><pre><a href="#void">void</a> zoom(<a href="#int">int</a> percent)</pre><p>Zoom into the centre of the board by the specified percent. </p><p>[ <a href="#">top</a> ]</p>
</div>

<div id="links">
<p>
All contents copyright &copy; 2005, 2007 Colin James Fitzpatrick, Jonathan Hughes, and Samuel Bedwell.
</p>
</div>

</div>

</body>

</html>
