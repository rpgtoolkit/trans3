// trans3.idl : IDL source for trans3.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (trans3.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
	[
		object,
		oleautomation,
		uuid(C146901F-ABFA-4D24-A4F2-D83C961D37B9),
		dual,
		helpstring("ICallbacks Interface"),
		pointer_default(unique)
	]
	interface ICallbacks : IDispatch
	{
		HRESULT CBRpgCode([string] BSTR rpgcodeCommand);
		HRESULT CBGetString([string] BSTR varname, [out, retval, string] BSTR *pRet);
		HRESULT CBGetNumerical([string] BSTR varname, [out, retval] double *pRet);
		HRESULT CBSetString([string] BSTR varname, [string] BSTR newValue);
		HRESULT CBSetNumerical([string] BSTR varname, double newValue);
		HRESULT CBGetScreenDC([out, retval] int *pRet);
		HRESULT CBGetScratch1DC([out, retval] int *pRet);
		HRESULT CBGetScratch2DC([out, retval] int *pRet);
		HRESULT CBGetMwinDC([out, retval] int *pRet);
		HRESULT CBPopupMwin([out, retval] int *pRet);
		HRESULT CBHideMwin([out, retval] int *pRet);
		HRESULT CBLoadEnemy([string] BSTR file, int eneSlot);
		HRESULT CBGetEnemyNum(int infoCode, int eneSlot, [out, retval] int *pRet);
		HRESULT CBGetEnemyString(int infoCode, int eneSlot, [out, retval, string] BSTR *pRet);
		HRESULT CBSetEnemyNum(int infoCode, int newValue, int eneSlot);
		HRESULT CBSetEnemyString(int infoCode, [string] BSTR newValue, int eneSlot);
		HRESULT CBGetPlayerNum(int infoCode, int arrayPos, int playerSlot, [out, retval] int *pRet);
		HRESULT CBGetPlayerString(int infoCode, int arrayPos, int playerSlot, [out, retval, string] BSTR *pRet);
		HRESULT CBSetPlayerNum(int infoCode, int arrayPos, int newVal, int playerSlot);
		HRESULT CBSetPlayerString(int infoCode, int arrayPos, [string] BSTR newVal, int playerSlot);
		HRESULT CBGetGeneralString(int infoCode, int arrayPos, int playerSlot, [out, retval, string] BSTR *pRet);
		HRESULT CBGetGeneralNum(int infoCode, int arrayPos, int playerSlot, [out, retval] int *pRet);
		HRESULT CBSetGeneralString(int infoCode, int arrayPos, int playerSlot, [string] BSTR newVal);
		HRESULT CBSetGeneralNum(int infoCode, int arrayPos, int playerSlot, int newVal);
		HRESULT CBGetCommandName([string] BSTR rpgcodeCommand, [out, retval, string] BSTR *pRet);
		HRESULT CBGetBrackets([string] BSTR rpgcodeCommand, [out, retval, string] BSTR *pRet);
		HRESULT CBCountBracketElements([string] BSTR rpgcodeCommand, [out, retval] int *pRet);
		HRESULT CBGetBracketElement([string] BSTR rpgcodeCommand, int elemNum, [out, retval, string] BSTR *pRet);
		HRESULT CBGetStringElementValue([string] BSTR rpgcodeCommand, [out, retval, string] BSTR *pRet);
		HRESULT CBGetNumElementValue([string] BSTR rpgcodeCommand, [out, retval] double *pRet);
		HRESULT CBGetElementType([string] BSTR rpgcodeCommand, [out, retval] int *pRet);
		HRESULT CBDebugMessage([string] BSTR message);
		HRESULT CBGetPathString(int infoCode, [out, retval, string] BSTR *pRet);
		HRESULT CBLoadSpecialMove([string] BSTR file);
		HRESULT CBGetSpecialMoveString(int infoCode, [out, retval, string] BSTR *pRet);
		HRESULT CBGetSpecialMoveNum(int infoCode, [out, retval] int *pRet);
		HRESULT CBLoadItem([string] BSTR file, int itmSlot);
		HRESULT CBGetItemString(int infoCode, int arrayPos, int itmSlot, [out, retval, string] BSTR *pRet);
		HRESULT CBGetItemNum(int infoCode, int arrayPos, int itmSlot, [out, retval] int *pRet);
		HRESULT CBGetBoardNum(int infoCode, int arrayPos1, int arrayPos2, int arrayPos3, [out, retval] int *pRet);
		HRESULT CBGetBoardString(int infoCode, int arrayPos1, int arrayPos2, int arrayPos3, [out, retval, string] BSTR *pRet);
		HRESULT CBSetBoardNum(int infoCode, int arrayPos1, int arrayPos2, int arrayPos3, int nValue);
		HRESULT CBSetBoardString(int infoCode, int arrayPos1, int arrayPos2, int arrayPos3, [string] BSTR newVal);
		HRESULT CBGetHwnd([out, retval] int *pRet);
		HRESULT CBRefreshScreen([out, retval] int *pRet);
		HRESULT CBCreateCanvas(int width, int height, [out, retval] int *pRet);
		HRESULT CBDestroyCanvas(int canvasID, [out, retval] int *pRet);
		HRESULT CBDrawCanvas(int canvasID, int x, int y, [out, retval] int *pRet);
		HRESULT CBDrawCanvasPartial(int canvasID, int xDest, int yDest, int xsrc, int ysrc, int width, int height, [out, retval] int *pRet);
		HRESULT CBDrawCanvasTransparent(int canvasID, int x, int y, int crTransparentColor, [out, retval] int *pRet);
		HRESULT CBDrawCanvasTransparentPartial(int canvasID, int xDest, int yDest, int xsrc, int ysrc, int width, int height, int crTransparentColor, [out, retval] int *pRet);
		HRESULT CBDrawCanvasTranslucent(int canvasID, int x, int y, double dIntensity, int crUnaffectedColor, int crTransparentColor, [out, retval] int *pRet);
		HRESULT CBCanvasLoadImage(int canvasID, [string] BSTR filename, [out, retval] int *pRet);
		HRESULT CBCanvasLoadSizedImage(int canvasID, [string] BSTR filename, [out, retval] int *pRet);
		HRESULT CBCanvasFill(int canvasID, int crColor, [out, retval] int *pRet);
		HRESULT CBCanvasResize(int canvasID, int width, int height, [out, retval] int *pRet);
		HRESULT CBCanvas2CanvasBlt(int cnvSrc, int cnvDest, int xDest, int yDest, [out, retval] int *pRet);
		HRESULT CBCanvas2CanvasBltPartial(int cnvSrc, int cnvDest, int xDest, int yDest, int xsrc, int ysrc, int width, int height, [out, retval] int *pRet);
		HRESULT CBCanvas2CanvasBltTransparent(int cnvSrc, int cnvDest, int xDest, int yDest, int crTransparentColor, [out, retval] int *pRet);
		HRESULT CBCanvas2CanvasBltTransparentPartial(int cnvSrc, int cnvDest, int xDest, int yDest, int xsrc, int ysrc, int width, int height, int crTransparentColor, [out, retval] int *pRet);
		HRESULT CBCanvas2CanvasBltTranslucent(int cnvSrc, int cnvDest, int destX, int destY, double dIntensity, int crUnaffectedColor, int crTransparentColor, [out, retval] int *pRet);
		HRESULT CBCanvasGetScreen(int cnvDest, [out, retval] int *pRet);
		HRESULT CBLoadString(int id, [string] BSTR defaultString, [out, retval, string] BSTR *pRet);
		HRESULT CBCanvasDrawText(int canvasID, [string] BSTR text, [string] BSTR font, int size, double x, double y, int crColor, int isBold, int isItalics, int isUnderline, int isCentred, [in, defaultvalue(0)] int isOutlined, [out, retval] int *pRet);
		HRESULT CBCanvasPopup(int canvasID, int x, int y, int stepSize, int popupType, [out, retval] int *pRet);
		HRESULT CBCanvasWidth(int canvasID, [out, retval] int *pRet);
		HRESULT CBCanvasHeight(int canvasID, [out, retval] int *pRet);
		HRESULT CBCanvasDrawLine(int canvasID, int x1, int y1, int x2, int y2, int crColor, [out, retval] int *pRet);
		HRESULT CBCanvasDrawRect(int canvasID, int x1, int y1, int x2, int y2, int crColor, [out, retval] int *pRet);
		HRESULT CBCanvasFillRect(int canvasID, int x1, int y1, int x2, int y2, int crColor, [out, retval] int *pRet);
		HRESULT CBCanvasDrawHand(int canvasID, int pointx, int pointy, [out, retval] int *pRet);
		HRESULT CBDrawHand(int pointx, int pointy, [out, retval] int *pRet);
		HRESULT CBCheckKey([string] BSTR keyPressed, [out, retval] int *pRet);
		HRESULT CBPlaySound([string] BSTR soundFile, [out, retval] int *pRet);
		HRESULT CBMessageWindow([string] BSTR text, int textColor, int bgColor, [string] BSTR bgPic, int mbtype, [out, retval] int *pRet);
		HRESULT CBFileDialog([string] BSTR initialPath, [string] BSTR fileFilter, [out, retval, string] BSTR *pRet);
		HRESULT CBDetermineSpecialMoves([string] BSTR playerHandle, [out, retval] int *pRet);
		HRESULT CBGetSpecialMoveListEntry(int idx, [out, retval, string] BSTR *pRet);
		HRESULT CBRunProgram([string] BSTR prgFile);
		HRESULT CBSetTarget(int targetIdx, int ttype);
		HRESULT CBSetSource(int sourceIdx, int sType);
		HRESULT CBGetPlayerHP(int playerIdx, [out, retval] double *pRet);
		HRESULT CBGetPlayerMaxHP(int playerIdx, [out, retval] double *pRet);
		HRESULT CBGetPlayerSMP(int playerIdx, [out, retval] double *pRet);
		HRESULT CBGetPlayerMaxSMP(int playerIdx, [out, retval] double *pRet);
		HRESULT CBGetPlayerFP(int playerIdx, [out, retval] double *pRet);
		HRESULT CBGetPlayerDP(int playerIdx, [out, retval] double *pRet);
		HRESULT CBGetPlayerName(int playerIdx, [out, retval, string] BSTR *pRet);
		HRESULT CBAddPlayerHP(int amount, int playerIdx);
		HRESULT CBAddPlayerSMP(int amount, int playerIdx);
		HRESULT CBSetPlayerHP(int amount, int playerIdx);
		HRESULT CBSetPlayerSMP(int amount, int playerIdx);
		HRESULT CBSetPlayerFP(int amount, int playerIdx);
		HRESULT CBSetPlayerDP(int amount, int playerIdx);
		HRESULT CBGetEnemyHP(int eneIdx, [out, retval] int *pRet);
		HRESULT CBGetEnemyMaxHP(int eneIdx, [out, retval] int *pRet);
		HRESULT CBGetEnemySMP(int eneIdx, [out, retval] int *pRet);
		HRESULT CBGetEnemyMaxSMP(int eneIdx, [out, retval] int *pRet);
		HRESULT CBGetEnemyFP(int eneIdx, [out, retval] int *pRet);
		HRESULT CBGetEnemyDP(int eneIdx, [out, retval] int *pRet);
		HRESULT CBAddEnemyHP(int amount, int eneIdx);
		HRESULT CBAddEnemySMP(int amount, int eneIdx);
		HRESULT CBSetEnemyHP(int amount, int eneIdx);
		HRESULT CBSetEnemySMP(int amount, int eneIdx);
		HRESULT CBCanvasDrawBackground(int canvasID, [string] BSTR bkgFile, int x, int y, int width, int height);
		HRESULT CBCreateAnimation([string] BSTR file, [out, retval] int *pRet);
		HRESULT CBDestroyAnimation(int idx);
		HRESULT CBCanvasDrawAnimation(int canvasID, int idx, int x, int y, int forceDraw, int forceTransp);
		HRESULT CBCanvasDrawAnimationFrame(int canvasID, int idx, int frame, int x, int y, int forceTranspFill);
		HRESULT CBAnimationCurrentFrame(int idx, [out, retval] int *pRet);
		HRESULT CBAnimationMaxFrames(int idx, [out, retval] int *pRet);
		HRESULT CBAnimationSizeX(int idx, [out, retval] int *pRet);
		HRESULT CBAnimationSizeY(int idx, [out, retval] int *pRet);
		HRESULT CBAnimationFrameImage(int idx, int frame, [out, retval, string] BSTR *pRet);
		HRESULT CBGetPartySize(int partyIdx, [out, retval] int *pRet);
		HRESULT CBGetFighterHP(int partyIdx, int fighterIdx, [out, retval] int *pRet);
		HRESULT CBGetFighterMaxHP(int partyIdx, int fighterIdx, [out, retval] int *pRet);
		HRESULT CBGetFighterSMP(int partyIdx, int fighterIdx, [out, retval] int *pRet);
		HRESULT CBGetFighterMaxSMP(int partyIdx, int fighterIdx, [out, retval] int *pRet);
		HRESULT CBGetFighterFP(int partyIdx, int fighterIdx, [out, retval] int *pRet);
		HRESULT CBGetFighterDP(int partyIdx, int fighterIdx, [out, retval] int *pRet);
		HRESULT CBGetFighterName(int partyIdx, int fighterIdx, [out, retval, string] BSTR *pRet);
		HRESULT CBGetFighterAnimation(int partyIdx, int fighterIdx, [string] BSTR animationName, [out, retval, string] BSTR *pRet);
		HRESULT CBGetFighterChargePercent(int partyIdx, int fighterIdx, [out, retval] int *pRet);
		HRESULT CBFightTick(void);
		HRESULT CBDrawTextAbsolute([string] BSTR text, [string] BSTR font, int size, int x, int y, int crColor, int isBold, int isItalics, int isUnderline, int isCentred, [in, defaultvalue(0)] int isOutlined, [out, retval] int *pRet);
		HRESULT CBReleaseFighterCharge(int partyIdx, int fighterIdx);
		HRESULT CBFightDoAttack(int sourcePartyIdx, int sourceFightIdx, int targetPartyIdx, int targetFightIdx, int amount, int toSMP, [out, retval] int *pRet);
		HRESULT CBFightUseItem(int sourcePartyIdx, int sourceFightIdx, int targetPartyIdx, int targetFightIdx, [string] BSTR itemFile);
		HRESULT CBFightUseSpecialMove(int sourcePartyIdx, int sourceFightIdx, int targetPartyIdx, int targetFightIdx, [string] BSTR moveFile);
		HRESULT CBDoEvents(void);
		HRESULT CBFighterAddStatusEffect(int partyIdx, int fightIdx, [string] BSTR statusFile);
		HRESULT CBFighterRemoveStatusEffect(int partyIdx, int fightIdx, [string] BSTR statusFile);
		HRESULT CBCheckMusic(void);
		HRESULT CBReleaseScreenDC(void);
		HRESULT CBCanvasOpenHdc(int cnv, [out, retval] int *pRet);
		HRESULT CBCanvasCloseHdc(int cnv, int hdc);
		HRESULT CBFileExists([string] BSTR strFile, [out, retval] short *pRet);
		HRESULT CBCanvasLock(int cnv);
		HRESULT CBCanvasUnlock(int cnv);
	};

[
	uuid(E3916E35-68ED-4C43-88EE-03C4AAA569B8),
	version(1.0),
	helpstring("trans3 1.0 Type Library")
]
library TRANS3Lib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(6FD78CD3-F15B-4092-B549-EB07DEC99432),
		helpstring("Callbacks Class")
	]
	coclass Callbacks
	{
		[default] interface ICallbacks;
	};
};
